var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/controllers/AppController.html",[0,1.625,1,1.834]],["body/controllers/AppController.html",[0,2.425,1,2.738,2,1.879,3,0.55,4,0.55,5,0.479,6,2.832,7,0.479,8,1.745,9,4.276,10,1.352,11,0.041,12,3.45,13,0.706,14,3.45,15,1.352,16,0.786,17,2.121,18,3.45,19,3.45,20,3.45,21,0.987,22,2.396,23,2.832,24,0.55,25,0.072,26,2.121,27,2.832,28,3.45,29,1.352,30,3.45,31,0.03,32,0.03]],["title/modules/AppModule.html",[33,1.834,34,1.834]],["body/modules/AppModule.html",[1,2.741,2,2.12,3,0.45,4,0.45,5,0.392,11,0.041,16,0.868,21,0.807,22,2.533,23,2.317,24,0.45,25,0.059,31,0.027,32,0.027,33,2.394,34,3.438,35,1.537,36,2.12,37,2.317,38,2.317,39,2.272,40,2.533,41,2.737,42,1.984,43,1.735,44,2.822,45,3.196,46,2.427,47,2.822,48,2.317,49,1.984,50,2.317,51,2.822,52,1.984,53,3.894,54,2.822,55,2.822,56,2.822,57,2.822]],["title/injectables/AppService.html",[22,1.45,58,0.766]],["body/injectables/AppService.html",[3,0.537,4,0.537,5,0.468,7,0.468,8,1.718,9,4.238,11,0.04,13,0.897,15,1.32,16,0.699,21,0.963,22,2.131,24,0.537,25,0.07,26,2.071,29,1.32,31,0.03,32,0.03,40,2.509,48,2.766,58,1.126,59,1.637,60,2.766,61,2.369,62,2.766,63,3.369,64,3.369,65,1.468,66,0.774,67,0.69,68,1.468,69,2.696,70,3.369,71,2.071,72,3.369,73,3.369]],["title/controllers/AuthController.html",[0,1.625,46,1.625]],["body/controllers/AuthController.html",[0,0.75,2,0.75,3,0.22,4,0.22,5,0.191,7,0.191,8,0.886,10,1.631,11,0.041,13,0.852,15,1.631,16,0.693,21,0.394,24,0.22,25,0.029,26,0.847,27,1.131,29,1.631,31,0.015,32,0.015,39,1.252,46,1.23,49,0.969,61,2.608,65,1.814,66,0.956,67,0.852,68,1.814,71,2.559,74,1.131,75,1.378,76,1.378,77,1.855,78,1.855,79,1.855,80,1.855,81,1.855,82,1.389,83,2.26,84,1.378,85,1.809,86,2.26,87,1.378,88,2.26,89,1.131,90,1.809,91,2.26,92,1.915,93,1.378,94,2.77,95,1.131,96,2.266,97,2.26,98,1.378,99,1.378,100,1.809,101,2.26,102,1.378,103,2.26,104,1.131,105,2.26,106,1.378,107,1.378,108,1.809,109,2.872,110,1.378,111,2.26,112,1.378,113,1.809,114,1.378,115,1.589,116,2.26,117,1.378,118,2.872,119,1.131,120,1.131,121,1.131,122,1.131,123,1.131,124,1.131,125,1.378,126,1.378,127,1.378,128,1.378,129,1.378,130,2.926,131,2.266,132,1.378,133,2.926,134,4.162,135,2.926,136,2.266,137,4.162,138,1.378,139,1.378,140,1.378,141,1.378,142,1.378,143,1.378,144,1.378,145,1.378,146,1.378,147,1.378,148,1.378,149,1.378,150,1.378]],["title/modules/AuthModule.html",[33,1.834,151,1.834]],["body/modules/AuthModule.html",[2,2.44,3,0.555,4,0.555,5,0.484,11,0.04,16,0.79,21,0.996,24,0.555,25,0.073,31,0.03,32,0.03,33,2.755,35,1.897,36,2.44,39,2.413,41,3.15,42,2.449,43,2.142,45,3.678,46,2.697,49,2.449,50,2.86,151,3.404,152,2.86,153,3.484,154,3.484]],["title/injectables/AuthService.html",[39,1.3,58,0.766]],["body/injectables/AuthService.html",[3,0.145,4,0.145,5,0.126,7,0.126,8,0.622,11,0.041,13,0.776,15,1.334,16,0.651,21,0.26,24,0.145,25,0.019,26,0.559,29,1.601,31,0.011,32,0.011,39,0.692,52,0.639,58,0.408,59,0.442,61,2.381,62,0.746,65,1.574,66,1.147,67,0.776,68,1.574,71,2.093,77,1.304,78,1.304,79,1.304,80,1.304,81,1.304,82,0.559,85,1.38,89,1.304,90,1.38,92,1.918,94,2.774,95,1.304,96,1.854,100,1.38,104,1.304,108,1.38,113,1.38,115,0.639,119,0.746,120,0.746,121,0.746,122,0.746,123,0.746,124,0.746,130,0.639,131,0.865,133,0.639,135,0.639,136,2.496,155,0.746,156,0.505,157,1.736,158,2.115,159,1.588,160,1.588,161,0.909,162,3.163,163,1.588,164,1.588,165,0.909,166,0.909,167,0.909,168,1.588,169,0.909,170,1.588,171,0.909,172,1.588,173,0.909,174,0.909,175,1.588,176,0.909,177,2.535,178,2.878,179,2.878,180,1.588,181,0.746,182,0.746,183,0.746,184,0.746,185,0.639,186,0.909,187,0.746,188,0.639,189,0.639,190,3.163,191,1.116,192,0.909,193,1.304,194,0.909,195,3.444,196,1.232,197,0.909,198,0.909,199,0.909,200,0.746,201,0.909,202,0.909,203,3.163,204,3.163,205,0.909,206,0.746,207,0.909,208,2.363,209,3.24,210,2.878,211,0.909,212,1.116,213,2.878,214,3.405,215,2.878,216,2.878,217,0.909,218,0.909,219,0.909,220,2.081,221,2.597,222,2.115,223,3.163,224,1.736,225,0.909,226,2.878,227,0.909,228,2.878,229,0.909,230,0.909,231,0.909,232,0.909,233,0.909,234,0.909,235,1.588,236,0.909,237,0.746,238,0.746,239,0.639,240,0.746,241,0.746,242,0.746,243,0.746,244,0.909,245,0.746]],["title/classes/AuthenticateRequestDto.html",[25,0.062,85,1.625]],["body/classes/AuthenticateRequestDto.html",[3,0.569,4,0.569,5,0.496,7,0.496,10,1.784,11,0.04,13,0.932,16,0.569,24,0.569,25,0.095,31,0.031,32,0.031,66,1.151,67,0.932,85,2.479,92,2.435,156,1.447,246,1.556,247,2.932,248,2.3,249,2.649,250,3.571,251,3.571,252,1.556]],["title/classes/ChangePasswordRequestDto.html",[25,0.062,90,1.625]],["body/classes/ChangePasswordRequestDto.html",[3,0.478,4,0.478,5,0.416,7,0.416,10,1.803,11,0.04,13,0.942,16,0.478,24,0.478,25,0.085,31,0.028,32,0.028,66,1.184,67,0.942,90,2.211,92,2.236,156,1.29,196,1.973,224,3.777,246,1.308,248,2.314,249,2.503,252,1.308,253,2.463,254,3,255,2.854,256,2.854,257,3.621,258,3,259,2.109,260,2.854,261,3,262,2.109,263,2.109,264,2.854,265,3.466,266,2.109]],["title/classes/ForgotPasswordRequestDto.html",[25,0.062,96,1.625]],["body/classes/ForgotPasswordRequestDto.html",[3,0.491,4,0.491,5,0.427,7,0.427,10,1.827,11,0.04,13,0.954,16,0.491,24,0.491,25,0.086,31,0.028,32,0.028,66,1.194,67,0.954,92,2.265,96,2.249,156,1.313,196,2.007,212,3.277,246,1.341,248,2.171,249,2.421,252,1.341,255,2.164,256,2.164,257,2.904,259,2.164,260,2.904,262,2.164,263,2.164,264,2.164,265,2.904,266,2.164,267,2.527,268,3.391,269,3.827,270,3.078,271,3.078,272,3.078]],["title/guards/JwtAuthGuard.html",[17,1.834,273,2.097]],["body/guards/JwtAuthGuard.html",[3,0.459,4,0.459,5,0.4,7,0.4,8,1.547,11,0.04,13,0.589,15,1.128,16,0.629,17,2.427,21,0.823,24,0.459,25,0.06,29,1.547,31,0.027,32,0.027,58,1.013,61,2.189,65,1.255,66,0.662,67,0.589,68,1.255,71,1.77,82,1.77,115,2.024,130,2.024,131,1.568,133,2.024,156,0.915,157,3.241,187,2.364,188,2.024,189,2.024,191,2.024,193,2.364,195,2.775,209,3.241,221,2.364,237,3.241,238,2.364,239,2.024,240,2.364,241,2.364,242,2.364,243,2.364,245,2.364,274,2.879,275,3.241,276,2.364,277,4.847,278,3.948,279,3.407,280,2.879,281,2.024,282,1.77,283,2.879,284,2.879,285,2.879,286,2.879]],["title/injectables/PrismaService.html",[40,1.45,58,0.766]],["body/injectables/PrismaService.html",[3,0.491,4,0.491,5,0.427,7,0.427,8,1.619,11,0.041,13,0.846,15,1.619,16,0.658,21,0.88,24,0.491,25,0.064,31,0.028,32,0.028,40,2.007,58,1.06,59,1.496,61,2.656,65,1.341,66,0.707,67,0.63,68,1.341,131,2.249,282,1.893,287,2.527,288,4.13,289,3.827,290,4.13,291,5.35,292,4.13,293,4.982,294,3.078,295,3.078,296,3.078,297,2.527,298,3.078,299,3.078,300,3.078]],["title/classes/RegisterRequestDto.html",[25,0.062,100,1.625]],["body/classes/RegisterRequestDto.html",[3,0.504,4,0.504,5,0.439,7,0.439,10,1.851,11,0.039,13,0.967,16,0.504,24,0.504,25,0.088,31,0.029,32,0.029,66,1.085,67,0.967,92,2.295,100,2.289,156,1.336,196,2.295,246,1.377,248,2.349,249,2.447,252,1.377,255,2.221,256,2.221,257,2.955,259,2.221,260,2.955,262,2.221,263,2.221,264,2.221,265,2.955,266,2.221,301,2.594,302,4.723,303,3.16,304,3.16,305,3.16]],["title/injectables/SentryInterceptor.html",[58,0.766,306,2.097]],["body/injectables/SentryInterceptor.html",[3,0.534,4,0.534,5,0.465,7,0.465,8,1.713,11,0.04,13,0.686,15,1.314,16,0.697,21,0.959,24,0.534,25,0.07,29,1.314,31,0.03,32,0.03,58,1.122,59,1.629,65,1.461,66,0.77,67,0.686,68,1.461,279,3.622,281,2.357,282,2.062,306,3.073,307,2.753,308,3.588,309,3.588,310,3.992,311,4.23,312,3.353,313,3.992,314,3.588,315,2.357,316,3.353]],["title/injectables/TimeoutInterceptor.html",[58,0.766,317,2.097]],["body/injectables/TimeoutInterceptor.html",[3,0.48,4,0.48,5,0.418,7,0.418,8,1.596,11,0.041,13,0.617,15,1.181,16,0.735,21,0.862,24,0.48,25,0.063,29,1.181,31,0.028,32,0.028,58,1.045,59,1.464,65,1.313,66,0.692,67,0.617,68,1.313,135,2.862,136,1.641,208,3.342,279,3.472,281,2.118,282,1.853,308,3.342,309,3.342,310,3.786,311,4.054,313,3.786,314,3.342,315,2.118,317,2.862,318,2.474,319,3.013,320,4.071,321,4.071,322,3.013,323,3.013,324,3.013,325,3.013,326,3.013,327,3.013,328,3.013]],["title/classes/VerifyCodeRequestDto.html",[25,0.062,108,1.625]],["body/classes/VerifyCodeRequestDto.html",[3,0.55,4,0.55,5,0.479,7,0.479,10,1.745,11,0.04,13,0.911,16,0.55,24,0.55,25,0.093,31,0.03,32,0.03,66,1.239,67,0.911,108,2.425,156,1.415,196,2.164,212,3.466,246,1.504,248,1.94,249,2.396,252,1.504,268,3.655,269,4.047,329,2.832,330,3.45,331,3.45]],["title/classes/VerifyIdTokenDto.html",[25,0.062,113,1.625]],["body/classes/VerifyIdTokenDto.html",[3,0.609,4,0.609,5,0.53,7,0.53,10,1.497,11,0.04,13,0.782,16,0.609,24,0.609,25,0.099,31,0.032,32,0.032,67,0.782,113,2.586,156,1.509,246,1.665,248,2.07,249,2.512,252,1.665,332,3.136,333,5.168,334,3.82]],["title/coverage.html",[335,3.32]],["body/coverage.html",[0,1.955,1,1.546,5,0.349,6,2.064,11,0.04,17,1.546,22,1.222,25,0.105,31,0.024,32,0.024,39,1.096,40,1.222,46,1.369,58,1.24,60,2.064,67,0.515,69,1.546,74,2.064,85,1.369,90,1.369,96,1.369,100,1.369,108,1.369,113,1.369,136,1.369,155,2.064,185,1.767,200,4.711,220,2.947,247,2.064,253,2.064,267,2.064,273,1.767,275,2.064,276,2.064,287,2.064,301,2.064,306,1.767,307,2.064,317,1.767,318,2.064,329,2.064,332,2.064,335,2.064,336,2.064,337,2.514,338,2.514,339,2.064,340,4.567,341,4.83,342,2.064,343,2.064,344,2.064,345,2.064,346,4.567,347,4.567,348,2.514,349,3.59,350,3.59,351,2.514,352,2.514,353,2.514,354,2.947,355,2.064,356,2.514,357,2.514,358,2.064,359,2.064,360,2.514,361,2.514,362,2.514]],["title/dependencies.html",[36,1.95,363,2.056]],["body/dependencies.html",[11,0.041,21,0.991,25,0.072,31,0.03,32,0.03,36,1.888,52,2.437,82,2.132,181,2.846,182,3.667,183,3.667,184,2.846,188,3.14,189,2.437,252,1.511,297,2.846,315,2.437,364,3.467,365,3.467,366,3.467,367,4.941,368,3.467,369,3.467,370,3.467,371,2.846,372,3.467,373,3.467,374,3.467,375,3.467,376,3.467,377,3.467,378,3.467,379,3.467,380,3.467,381,3.467,382,3.467,383,3.467]],["title/miscellaneous/functions.html",[384,1.54,385,2.939]],["body/miscellaneous/functions.html",[7,0.594,11,0.035,31,0.035,32,0.035,342,3.512,343,4.458,358,3.512,359,4.458,384,2.63,385,3.512,386,4.278,387,4.278]],["title/index.html",[7,0.348,388,2.056,389,2.056]],["body/index.html",[11,0.039,31,0.034,32,0.034,69,2.554,390,4.998,391,4.153,392,4.153,393,5.362,394,4.153,395,4.153,396,4.153,397,4.153,398,4.153,399,4.153]],["title/license.html",[388,2.056,389,2.056,400,1.761]],["body/license.html",[11,0.027,31,0.027,32,0.027,43,1.785,336,2.383,371,2.383,400,2.041,401,2.383,402,4.524,403,2.903,404,2.903,405,2.383,406,3.97,407,2.903,408,2.903,409,2.903,410,2.903,411,2.903,412,2.903,413,3.97,414,5.558,415,2.903,416,2.903,417,2.903,418,4.524,419,2.903,420,3.97,421,2.903,422,2.903,423,3.97,424,2.903,425,2.903,426,2.903,427,2.903,428,2.903,429,2.903,430,2.903,431,3.97,432,2.903,433,2.903,434,2.903,435,2.903,436,2.903,437,2.903,438,2.903,439,3.97,440,3.97,441,2.903,442,2.903,443,2.903,444,2.903,445,2.903,446,2.903,447,2.903,448,2.903,449,2.903,450,2.903,451,2.903,452,2.903,453,2.903,454,2.903,455,2.903,456,2.903,457,2.903,458,2.903,459,2.903,460,2.903,461,2.903,462,2.903,463,2.903,464,2.903,465,2.903,466,2.903,467,2.903,468,2.903,469,2.903]],["title/modules.html",[35,2.202]],["body/modules.html",[11,0.035,31,0.035,32,0.035,34,2.662,35,2.358,151,2.662,470,5.124,471,5.124,472,5.124,473,5.124]],["title/overview.html",[474,3.32]],["body/overview.html",[2,1.945,11,0.038,22,2.435,31,0.031,32,0.031,34,3.525,35,1.945,36,2.479,37,2.932,38,2.932,39,2.3,40,2.435,41,3.2,42,2.51,43,2.196,59,1.735,151,3.245,152,2.932,246,1.556,273,2.51,474,2.932,475,4.552,476,3.571,477,3.571,478,3.571]],["title/properties.html",[156,1.138,363,2.056]],["body/properties.html",[11,0.04,31,0.034,32,0.034,156,1.344,400,3.551,401,3.47,405,3.47,479,4.227,480,4.227,481,4.227,482,4.227,483,4.227,484,4.227]],["title/miscellaneous/variables.html",[384,1.54,485,2.939]],["body/miscellaneous/variables.html",[7,0.398,11,0.041,29,1.124,31,0.027,32,0.027,61,1.913,66,0.904,69,2.421,94,2.016,131,2.144,136,2.448,185,2.767,191,2.016,195,3.16,196,2.464,206,3.972,239,2.016,248,1.25,289,2.354,339,2.354,344,2.354,345,3.232,354,2.354,355,3.232,384,1.763,485,2.354,486,3.937,487,2.868,488,2.868,489,4.838,490,2.868,491,2.868,492,2.868,493,2.868,494,4.495,495,2.868,496,2.868,497,2.868,498,2.868,499,3.937,500,2.868,501,2.868,502,2.868,503,2.868,504,2.868,505,2.868]]],"invertedIndex":[["",{"_index":11,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/AuthenticateRequestDto.html":{},"classes/ChangePasswordRequestDto.html":{},"classes/ForgotPasswordRequestDto.html":{},"guards/JwtAuthGuard.html":{},"injectables/PrismaService.html":{},"classes/RegisterRequestDto.html":{},"injectables/SentryInterceptor.html":{},"injectables/TimeoutInterceptor.html":{},"classes/VerifyCodeRequestDto.html":{},"classes/VerifyIdTokenDto.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["0",{"_index":200,"title":{},"body":{"injectables/AuthService.html":{},"coverage.html":{}}}],["0.0.4",{"_index":480,"title":{},"body":{"properties.html":{}}}],["0.1.13",{"_index":380,"title":{},"body":{"dependencies.html":{}}}],["0.13.2",{"_index":375,"title":{},"body":{"dependencies.html":{}}}],["0/1",{"_index":341,"title":{},"body":{"coverage.html":{}}}],["0/10",{"_index":360,"title":{},"body":{"coverage.html":{}}}],["0/2",{"_index":347,"title":{},"body":{"coverage.html":{}}}],["0/3",{"_index":346,"title":{},"body":{"coverage.html":{}}}],["0/4",{"_index":351,"title":{},"body":{"coverage.html":{}}}],["0/8",{"_index":348,"title":{},"body":{"coverage.html":{}}}],["1",{"_index":478,"title":{},"body":{"overview.html":{}}}],["1/1",{"_index":357,"title":{},"body":{"coverage.html":{}}}],["1/3",{"_index":353,"title":{},"body":{"coverage.html":{}}}],["1/4",{"_index":350,"title":{},"body":{"coverage.html":{}}}],["100",{"_index":356,"title":{},"body":{"coverage.html":{}}}],["16.0.3",{"_index":377,"title":{},"body":{"dependencies.html":{}}}],["2",{"_index":475,"title":{},"body":{"overview.html":{}}}],["2.2.0",{"_index":368,"title":{},"body":{"dependencies.html":{}}}],["2022",{"_index":404,"title":{},"body":{"license.html":{}}}],["25",{"_index":349,"title":{},"body":{"coverage.html":{}}}],["3.0.2",{"_index":382,"title":{},"body":{"dependencies.html":{}}}],["3.2.0",{"_index":374,"title":{},"body":{"dependencies.html":{}}}],["3.218.0",{"_index":366,"title":{},"body":{"dependencies.html":{}}}],["33",{"_index":352,"title":{},"body":{"coverage.html":{}}}],["4.6.1",{"_index":372,"title":{},"body":{"dependencies.html":{}}}],["5",{"_index":476,"title":{},"body":{"overview.html":{}}}],["6",{"_index":477,"title":{},"body":{"overview.html":{}}}],["6.0.1",{"_index":373,"title":{},"body":{"dependencies.html":{}}}],["7.2.0",{"_index":383,"title":{},"body":{"dependencies.html":{}}}],["9",{"_index":260,"title":{},"body":{"classes/ChangePasswordRequestDto.html":{},"classes/ForgotPasswordRequestDto.html":{},"classes/RegisterRequestDto.html":{}}}],["9.0.0",{"_index":367,"title":{},"body":{"dependencies.html":{}}}],["above",{"_index":438,"title":{},"body":{"license.html":{}}}],["access",{"_index":115,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"guards/JwtAuthGuard.html":{}}}],["accesstoken",{"_index":333,"title":{},"body":{"classes/VerifyIdTokenDto.html":{}}}],["action",{"_index":463,"title":{},"body":{"license.html":{}}}],["alice",{"_index":501,"title":{},"body":{"miscellaneous/variables.html":{}}}],["alice@prisma.io",{"_index":500,"title":{},"body":{"miscellaneous/variables.html":{}}}],["amazon",{"_index":181,"title":{},"body":{"injectables/AuthService.html":{},"dependencies.html":{}}}],["and/or",{"_index":429,"title":{},"body":{"license.html":{}}}],["api",{"_index":392,"title":{},"body":{"index.html":{}}}],["app",{"_index":295,"title":{},"body":{"injectables/PrismaService.html":{}}}],["app.close",{"_index":300,"title":{},"body":{"injectables/PrismaService.html":{}}}],["appcontroller",{"_index":1,"title":{"controllers/AppController.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"coverage.html":{}}}],["appmodule",{"_index":34,"title":{"modules/AppModule.html":{}},"body":{"modules/AppModule.html":{},"modules.html":{},"overview.html":{}}}],["appservice",{"_index":22,"title":{"injectables/AppService.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"coverage.html":{},"overview.html":{}}}],["arising",{"_index":467,"title":{},"body":{"license.html":{}}}],["associated",{"_index":415,"title":{},"body":{"license.html":{}}}],["async",{"_index":61,"title":{},"body":{"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"guards/JwtAuthGuard.html":{},"injectables/PrismaService.html":{},"miscellaneous/variables.html":{}}}],["auth",{"_index":76,"title":{},"body":{"controllers/AuthController.html":{}}}],["auth.guard",{"_index":19,"title":{},"body":{"controllers/AppController.html":{}}}],["auth.guard.ts",{"_index":276,"title":{},"body":{"guards/JwtAuthGuard.html":{},"coverage.html":{}}}],["auth.guard.ts:12",{"_index":280,"title":{},"body":{"guards/JwtAuthGuard.html":{}}}],["authcontroller",{"_index":46,"title":{"controllers/AuthController.html":{}},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"coverage.html":{}}}],["authenticate",{"_index":77,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["authenticate(@body",{"_index":146,"title":{},"body":{"controllers/AuthController.html":{}}}],["authenticate(authenticaterequest",{"_index":84,"title":{},"body":{"controllers/AuthController.html":{}}}],["authenticate(user",{"_index":164,"title":{},"body":{"injectables/AuthService.html":{}}}],["authenticaterequest",{"_index":88,"title":{},"body":{"controllers/AuthController.html":{}}}],["authenticaterequestdto",{"_index":85,"title":{"classes/AuthenticateRequestDto.html":{}},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/AuthenticateRequestDto.html":{},"coverage.html":{}}}],["authenticationdetails",{"_index":178,"title":{},"body":{"injectables/AuthService.html":{}}}],["authmodule",{"_index":151,"title":{"modules/AuthModule.html":{}},"body":{"modules/AuthModule.html":{},"modules.html":{},"overview.html":{}}}],["author",{"_index":483,"title":{},"body":{"properties.html":{}}}],["authors",{"_index":456,"title":{},"body":{"license.html":{}}}],["authregisterrequest",{"_index":170,"title":{},"body":{"injectables/AuthService.html":{}}}],["authservice",{"_index":39,"title":{"injectables/AuthService.html":{}},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"coverage.html":{},"overview.html":{}}}],["await",{"_index":131,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"guards/JwtAuthGuard.html":{},"injectables/PrismaService.html":{},"miscellaneous/variables.html":{}}}],["aws",{"_index":188,"title":{},"body":{"injectables/AuthService.html":{},"guards/JwtAuthGuard.html":{},"dependencies.html":{}}}],["aws.cognito.signin.user.admin",{"_index":243,"title":{},"body":{"injectables/AuthService.html":{},"guards/JwtAuthGuard.html":{}}}],["badrequestexception",{"_index":125,"title":{},"body":{"controllers/AuthController.html":{}}}],["badrequestexception(e.message",{"_index":137,"title":{},"body":{"controllers/AuthController.html":{}}}],["bob",{"_index":503,"title":{},"body":{"miscellaneous/variables.html":{}}}],["bob@prisma.io",{"_index":502,"title":{},"body":{"miscellaneous/variables.html":{}}}],["body",{"_index":118,"title":{},"body":{"controllers/AuthController.html":{}}}],["bootstrap",{"_index":359,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["browse",{"_index":473,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":470,"title":{},"body":{"modules.html":{}}}],["c",{"_index":403,"title":{},"body":{"license.html":{}}}],["callhandler",{"_index":311,"title":{},"body":{"injectables/SentryInterceptor.html":{},"injectables/TimeoutInterceptor.html":{}}}],["canactivate",{"_index":277,"title":{},"body":{"guards/JwtAuthGuard.html":{}}}],["canactivate(context",{"_index":278,"title":{},"body":{"guards/JwtAuthGuard.html":{}}}],["catch",{"_index":133,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"guards/JwtAuthGuard.html":{}}}],["catcherror",{"_index":322,"title":{},"body":{"injectables/TimeoutInterceptor.html":{}}}],["catcherror((err",{"_index":327,"title":{},"body":{"injectables/TimeoutInterceptor.html":{}}}],["changepassword",{"_index":78,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["changepassword(@body",{"_index":140,"title":{},"body":{"controllers/AuthController.html":{}}}],["changepassword(user",{"_index":89,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["changepasswordrequestdto",{"_index":90,"title":{"classes/ChangePasswordRequestDto.html":{}},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/ChangePasswordRequestDto.html":{},"coverage.html":{}}}],["charge",{"_index":410,"title":{},"body":{"license.html":{}}}],["claim",{"_index":459,"title":{},"body":{"license.html":{}}}],["class",{"_index":25,"title":{"classes/AuthenticateRequestDto.html":{},"classes/ChangePasswordRequestDto.html":{},"classes/ForgotPasswordRequestDto.html":{},"classes/RegisterRequestDto.html":{},"classes/VerifyCodeRequestDto.html":{},"classes/VerifyIdTokenDto.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/AuthenticateRequestDto.html":{},"classes/ChangePasswordRequestDto.html":{},"classes/ForgotPasswordRequestDto.html":{},"guards/JwtAuthGuard.html":{},"injectables/PrismaService.html":{},"classes/RegisterRequestDto.html":{},"injectables/SentryInterceptor.html":{},"injectables/TimeoutInterceptor.html":{},"classes/VerifyCodeRequestDto.html":{},"classes/VerifyIdTokenDto.html":{},"coverage.html":{},"dependencies.html":{}}}],["classes",{"_index":246,"title":{},"body":{"classes/AuthenticateRequestDto.html":{},"classes/ChangePasswordRequestDto.html":{},"classes/ForgotPasswordRequestDto.html":{},"classes/RegisterRequestDto.html":{},"classes/VerifyCodeRequestDto.html":{},"classes/VerifyIdTokenDto.html":{},"overview.html":{}}}],["clientid",{"_index":193,"title":{},"body":{"injectables/AuthService.html":{},"guards/JwtAuthGuard.html":{}}}],["cluster_appmodule",{"_index":37,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_providers",{"_index":38,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_authmodule",{"_index":152,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_providers",{"_index":153,"title":{},"body":{"modules/AuthModule.html":{}}}],["code",{"_index":212,"title":{},"body":{"injectables/AuthService.html":{},"classes/ForgotPasswordRequestDto.html":{},"classes/VerifyCodeRequestDto.html":{}}}],["code.tostring",{"_index":218,"title":{},"body":{"injectables/AuthService.html":{}}}],["cognito",{"_index":182,"title":{},"body":{"injectables/AuthService.html":{},"dependencies.html":{}}}],["cognitoclient",{"_index":355,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["cognitoclient.send(command",{"_index":495,"title":{},"body":{"miscellaneous/variables.html":{}}}],["cognitoidentityproviderclient",{"_index":490,"title":{},"body":{"miscellaneous/variables.html":{}}}],["cognitojwtverifier",{"_index":187,"title":{},"body":{"injectables/AuthService.html":{},"guards/JwtAuthGuard.html":{}}}],["cognitojwtverifier.create",{"_index":238,"title":{},"body":{"injectables/AuthService.html":{},"guards/JwtAuthGuard.html":{}}}],["cognitouser",{"_index":179,"title":{},"body":{"injectables/AuthService.html":{}}}],["cognitouser(userdata",{"_index":216,"title":{},"body":{"injectables/AuthService.html":{}}}],["cognitouser.authenticateuser(authenticationdetails",{"_index":225,"title":{},"body":{"injectables/AuthService.html":{}}}],["cognitouser.changepassword",{"_index":227,"title":{},"body":{"injectables/AuthService.html":{}}}],["cognitouser.confirmpassword(code.tostring",{"_index":230,"title":{},"body":{"injectables/AuthService.html":{}}}],["cognitouser.confirmregistration",{"_index":217,"title":{},"body":{"injectables/AuthService.html":{}}}],["cognitouser.forgotpassword",{"_index":229,"title":{},"body":{"injectables/AuthService.html":{}}}],["cognitouserattribute",{"_index":180,"title":{},"body":{"injectables/AuthService.html":{}}}],["cognitouserpool",{"_index":177,"title":{},"body":{"injectables/AuthService.html":{}}}],["cognitoのuserpoolの特定のemail",{"_index":496,"title":{},"body":{"miscellaneous/variables.html":{}}}],["command",{"_index":491,"title":{},"body":{"miscellaneous/variables.html":{}}}],["common/guards/jwt",{"_index":18,"title":{},"body":{"controllers/AppController.html":{}}}],["conditions",{"_index":437,"title":{},"body":{"license.html":{}}}],["config/configuration",{"_index":54,"title":{},"body":{"modules/AppModule.html":{}}}],["configmodule",{"_index":51,"title":{},"body":{"modules/AppModule.html":{}}}],["configmodule.forroot",{"_index":56,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice",{"_index":162,"title":{},"body":{"injectables/AuthService.html":{}}}],["configuration",{"_index":53,"title":{},"body":{"modules/AppModule.html":{}}}],["connection",{"_index":468,"title":{},"body":{"license.html":{}}}],["console.log(userseed",{"_index":504,"title":{},"body":{"miscellaneous/variables.html":{}}}],["const",{"_index":195,"title":{},"body":{"injectables/AuthService.html":{},"guards/JwtAuthGuard.html":{},"miscellaneous/variables.html":{}}}],["constructor",{"_index":62,"title":{},"body":{"injectables/AppService.html":{},"injectables/AuthService.html":{}}}],["constructor(configservice",{"_index":161,"title":{},"body":{"injectables/AuthService.html":{}}}],["constructor(prisma",{"_index":63,"title":{},"body":{"injectables/AppService.html":{}}}],["constructor(private",{"_index":26,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["context",{"_index":281,"title":{},"body":{"guards/JwtAuthGuard.html":{},"injectables/SentryInterceptor.html":{},"injectables/TimeoutInterceptor.html":{}}}],["context.switchtohttp().getrequest",{"_index":284,"title":{},"body":{"guards/JwtAuthGuard.html":{}}}],["contract",{"_index":464,"title":{},"body":{"license.html":{}}}],["controller",{"_index":0,"title":{"controllers/AppController.html":{},"controllers/AuthController.html":{}},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"coverage.html":{}}}],["controller('auth",{"_index":128,"title":{},"body":{"controllers/AuthController.html":{}}}],["controllers",{"_index":2,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"overview.html":{}}}],["controllers/app.controller",{"_index":47,"title":{},"body":{"modules/AppModule.html":{}}}],["controllers/auth.controller",{"_index":50,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{}}}],["copies",{"_index":431,"title":{},"body":{"license.html":{}}}],["copy",{"_index":413,"title":{},"body":{"license.html":{}}}],["copyright",{"_index":402,"title":{},"body":{"license.html":{}}}],["coverage",{"_index":335,"title":{"coverage.html":{}},"body":{"coverage.html":{}}}],["created",{"_index":505,"title":{},"body":{"miscellaneous/variables.html":{}}}],["createuserseed",{"_index":345,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["daichi",{"_index":405,"title":{},"body":{"license.html":{},"properties.html":{}}}],["damages",{"_index":460,"title":{},"body":{"license.html":{}}}],["data",{"_index":499,"title":{},"body":{"miscellaneous/variables.html":{}}}],["deal",{"_index":417,"title":{},"body":{"license.html":{}}}],["dealings",{"_index":469,"title":{},"body":{"license.html":{}}}],["decorators",{"_index":10,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"classes/AuthenticateRequestDto.html":{},"classes/ChangePasswordRequestDto.html":{},"classes/ForgotPasswordRequestDto.html":{},"classes/RegisterRequestDto.html":{},"classes/VerifyCodeRequestDto.html":{},"classes/VerifyIdTokenDto.html":{}}}],["default",{"_index":489,"title":{},"body":{"miscellaneous/variables.html":{}}}],["defined",{"_index":13,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/AuthenticateRequestDto.html":{},"classes/ChangePasswordRequestDto.html":{},"classes/ForgotPasswordRequestDto.html":{},"guards/JwtAuthGuard.html":{},"injectables/PrismaService.html":{},"classes/RegisterRequestDto.html":{},"injectables/SentryInterceptor.html":{},"injectables/TimeoutInterceptor.html":{},"classes/VerifyCodeRequestDto.html":{},"classes/VerifyIdTokenDto.html":{}}}],["dependencies",{"_index":36,"title":{"dependencies.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"dependencies.html":{},"overview.html":{}}}],["description",{"_index":481,"title":{},"body":{"properties.html":{}}}],["develop",{"_index":397,"title":{},"body":{"index.html":{}}}],["distribute",{"_index":427,"title":{},"body":{"license.html":{}}}],["documentation",{"_index":336,"title":{},"body":{"coverage.html":{},"license.html":{}}}],["dotenv",{"_index":376,"title":{},"body":{"dependencies.html":{}}}],["dto/authenticate.request.dto",{"_index":119,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["dto/changepassword.request.dto",{"_index":120,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["dto/forgotpassword.dto",{"_index":121,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["dto/register.request.dto",{"_index":122,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["dto/verifycode.request.dto",{"_index":123,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["dto/verifyidtoken.request.dto",{"_index":124,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["duplicated",{"_index":202,"title":{},"body":{"injectables/AuthService.html":{}}}],["e",{"_index":134,"title":{},"body":{"controllers/AuthController.html":{}}}],["email",{"_index":196,"title":{},"body":{"injectables/AuthService.html":{},"classes/ChangePasswordRequestDto.html":{},"classes/ForgotPasswordRequestDto.html":{},"classes/RegisterRequestDto.html":{},"classes/VerifyCodeRequestDto.html":{},"miscellaneous/variables.html":{}}}],["enableshutdownhooks",{"_index":290,"title":{},"body":{"injectables/PrismaService.html":{}}}],["enableshutdownhooks(app",{"_index":292,"title":{},"body":{"injectables/PrismaService.html":{}}}],["err",{"_index":208,"title":{},"body":{"injectables/AuthService.html":{},"injectables/TimeoutInterceptor.html":{}}}],["error",{"_index":221,"title":{},"body":{"injectables/AuthService.html":{},"guards/JwtAuthGuard.html":{}}}],["error('the",{"_index":201,"title":{},"body":{"injectables/AuthService.html":{}}}],["event",{"_index":455,"title":{},"body":{"license.html":{}}}],["executioncontext",{"_index":279,"title":{},"body":{"guards/JwtAuthGuard.html":{},"injectables/SentryInterceptor.html":{},"injectables/TimeoutInterceptor.html":{}}}],["existeduser",{"_index":197,"title":{},"body":{"injectables/AuthService.html":{}}}],["existeduser.length",{"_index":199,"title":{},"body":{"injectables/AuthService.html":{}}}],["export",{"_index":24,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/AuthenticateRequestDto.html":{},"classes/ChangePasswordRequestDto.html":{},"classes/ForgotPasswordRequestDto.html":{},"guards/JwtAuthGuard.html":{},"injectables/PrismaService.html":{},"classes/RegisterRequestDto.html":{},"injectables/SentryInterceptor.html":{},"injectables/TimeoutInterceptor.html":{},"classes/VerifyCodeRequestDto.html":{},"classes/VerifyIdTokenDto.html":{}}}],["express",{"_index":371,"title":{},"body":{"dependencies.html":{},"license.html":{}}}],["extends",{"_index":288,"title":{},"body":{"injectables/PrismaService.html":{}}}],["false",{"_index":245,"title":{},"body":{"injectables/AuthService.html":{},"guards/JwtAuthGuard.html":{}}}],["fetchlistusers",{"_index":185,"title":{},"body":{"injectables/AuthService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["fetchlistusers(email",{"_index":198,"title":{},"body":{"injectables/AuthService.html":{}}}],["file",{"_index":5,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/AuthenticateRequestDto.html":{},"classes/ChangePasswordRequestDto.html":{},"classes/ForgotPasswordRequestDto.html":{},"guards/JwtAuthGuard.html":{},"injectables/PrismaService.html":{},"classes/RegisterRequestDto.html":{},"injectables/SentryInterceptor.html":{},"injectables/TimeoutInterceptor.html":{},"classes/VerifyCodeRequestDto.html":{},"classes/VerifyIdTokenDto.html":{},"coverage.html":{}}}],["files",{"_index":416,"title":{},"body":{"license.html":{}}}],["filter",{"_index":493,"title":{},"body":{"miscellaneous/variables.html":{}}}],["fitness",{"_index":451,"title":{},"body":{"license.html":{}}}],["following",{"_index":436,"title":{},"body":{"license.html":{}}}],["forgotpassword",{"_index":79,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["forgotpassword(@body",{"_index":142,"title":{},"body":{"controllers/AuthController.html":{}}}],["forgotpassword(user",{"_index":95,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["forgotpasswordrequestdto",{"_index":96,"title":{"classes/ForgotPasswordRequestDto.html":{}},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/ForgotPasswordRequestDto.html":{},"coverage.html":{}}}],["free",{"_index":409,"title":{},"body":{"license.html":{}}}],["function",{"_index":220,"title":{},"body":{"injectables/AuthService.html":{},"coverage.html":{}}}],["functions",{"_index":385,"title":{"miscellaneous/functions.html":{}},"body":{"miscellaneous/functions.html":{}}}],["furnished",{"_index":434,"title":{},"body":{"license.html":{}}}],["gethello",{"_index":9,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{}}}],["getting",{"_index":388,"title":{"index.html":{},"license.html":{}},"body":{}}],["granted",{"_index":408,"title":{},"body":{"license.html":{}}}],["guard",{"_index":273,"title":{"guards/JwtAuthGuard.html":{}},"body":{"coverage.html":{},"overview.html":{}}}],["guards",{"_index":274,"title":{},"body":{"guards/JwtAuthGuard.html":{}}}],["hello",{"_index":72,"title":{},"body":{"injectables/AppService.html":{}}}],["helpers/utils.helper",{"_index":186,"title":{},"body":{"injectables/AuthService.html":{}}}],["hereby",{"_index":407,"title":{},"body":{"license.html":{}}}],["holders",{"_index":457,"title":{},"body":{"license.html":{}}}],["httpcode",{"_index":126,"title":{},"body":{"controllers/AuthController.html":{}}}],["httpcode(200",{"_index":148,"title":{},"body":{"controllers/AuthController.html":{}}}],["httpcode(200)@post('verify",{"_index":114,"title":{},"body":{"controllers/AuthController.html":{}}}],["identifier",{"_index":337,"title":{},"body":{"coverage.html":{}}}],["identity",{"_index":183,"title":{},"body":{"injectables/AuthService.html":{},"dependencies.html":{}}}],["implements",{"_index":282,"title":{},"body":{"guards/JwtAuthGuard.html":{},"injectables/PrismaService.html":{},"injectables/SentryInterceptor.html":{},"injectables/TimeoutInterceptor.html":{}}}],["implied",{"_index":447,"title":{},"body":{"license.html":{}}}],["import",{"_index":16,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/AuthenticateRequestDto.html":{},"classes/ChangePasswordRequestDto.html":{},"classes/ForgotPasswordRequestDto.html":{},"guards/JwtAuthGuard.html":{},"injectables/PrismaService.html":{},"classes/RegisterRequestDto.html":{},"injectables/SentryInterceptor.html":{},"injectables/TimeoutInterceptor.html":{},"classes/VerifyCodeRequestDto.html":{},"classes/VerifyIdTokenDto.html":{}}}],["imports",{"_index":55,"title":{},"body":{"modules/AppModule.html":{}}}],["included",{"_index":441,"title":{},"body":{"license.html":{}}}],["including",{"_index":420,"title":{},"body":{"license.html":{}}}],["index",{"_index":7,"title":{"index.html":{}},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/AuthenticateRequestDto.html":{},"classes/ChangePasswordRequestDto.html":{},"classes/ForgotPasswordRequestDto.html":{},"guards/JwtAuthGuard.html":{},"injectables/PrismaService.html":{},"classes/RegisterRequestDto.html":{},"injectables/SentryInterceptor.html":{},"injectables/TimeoutInterceptor.html":{},"classes/VerifyCodeRequestDto.html":{},"classes/VerifyIdTokenDto.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["inestapplication",{"_index":293,"title":{},"body":{"injectables/PrismaService.html":{}}}],["info",{"_index":3,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/AuthenticateRequestDto.html":{},"classes/ChangePasswordRequestDto.html":{},"classes/ForgotPasswordRequestDto.html":{},"guards/JwtAuthGuard.html":{},"injectables/PrismaService.html":{},"classes/RegisterRequestDto.html":{},"injectables/SentryInterceptor.html":{},"injectables/TimeoutInterceptor.html":{},"classes/VerifyCodeRequestDto.html":{},"classes/VerifyIdTokenDto.html":{}}}],["injectable",{"_index":58,"title":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"injectables/PrismaService.html":{},"injectables/SentryInterceptor.html":{},"injectables/TimeoutInterceptor.html":{}},"body":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"guards/JwtAuthGuard.html":{},"injectables/PrismaService.html":{},"injectables/SentryInterceptor.html":{},"injectables/TimeoutInterceptor.html":{},"coverage.html":{}}}],["injectables",{"_index":59,"title":{},"body":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"injectables/PrismaService.html":{},"injectables/SentryInterceptor.html":{},"injectables/TimeoutInterceptor.html":{},"overview.html":{}}}],["install",{"_index":398,"title":{},"body":{"index.html":{}}}],["instanceof",{"_index":328,"title":{},"body":{"injectables/TimeoutInterceptor.html":{}}}],["intercept",{"_index":308,"title":{},"body":{"injectables/SentryInterceptor.html":{},"injectables/TimeoutInterceptor.html":{}}}],["intercept(context",{"_index":309,"title":{},"body":{"injectables/SentryInterceptor.html":{},"injectables/TimeoutInterceptor.html":{}}}],["isemail",{"_index":302,"title":{},"body":{"classes/RegisterRequestDto.html":{}}}],["isnumber",{"_index":269,"title":{},"body":{"classes/ForgotPasswordRequestDto.html":{},"classes/VerifyCodeRequestDto.html":{}}}],["isstring",{"_index":249,"title":{},"body":{"classes/AuthenticateRequestDto.html":{},"classes/ChangePasswordRequestDto.html":{},"classes/ForgotPasswordRequestDto.html":{},"classes/RegisterRequestDto.html":{},"classes/VerifyCodeRequestDto.html":{},"classes/VerifyIdTokenDto.html":{}}}],["isstring()@minlength(8)@matches(/[a",{"_index":255,"title":{},"body":{"classes/ChangePasswordRequestDto.html":{},"classes/ForgotPasswordRequestDto.html":{},"classes/RegisterRequestDto.html":{}}}],["js",{"_index":184,"title":{},"body":{"injectables/AuthService.html":{},"dependencies.html":{}}}],["jwt",{"_index":189,"title":{},"body":{"injectables/AuthService.html":{},"guards/JwtAuthGuard.html":{},"dependencies.html":{}}}],["jwtauthguard",{"_index":17,"title":{"guards/JwtAuthGuard.html":{}},"body":{"controllers/AppController.html":{},"guards/JwtAuthGuard.html":{},"coverage.html":{}}}],["jwtverifier",{"_index":237,"title":{},"body":{"injectables/AuthService.html":{},"guards/JwtAuthGuard.html":{}}}],["jwtverifier.verify(userreq.accesstoken",{"_index":244,"title":{},"body":{"injectables/AuthService.html":{}}}],["kind",{"_index":446,"title":{},"body":{"license.html":{}}}],["liability",{"_index":461,"title":{},"body":{"license.html":{}}}],["liable",{"_index":458,"title":{},"body":{"license.html":{}}}],["license",{"_index":400,"title":{"license.html":{}},"body":{"license.html":{},"properties.html":{}}}],["limitation",{"_index":421,"title":{},"body":{"license.html":{}}}],["limited",{"_index":448,"title":{},"body":{"license.html":{}}}],["listuserscommand",{"_index":492,"title":{},"body":{"miscellaneous/variables.html":{}}}],["load",{"_index":57,"title":{},"body":{"modules/AppModule.html":{}}}],["main",{"_index":343,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["matches",{"_index":262,"title":{},"body":{"classes/ChangePasswordRequestDto.html":{},"classes/ForgotPasswordRequestDto.html":{},"classes/RegisterRequestDto.html":{}}}],["matches(/[0",{"_index":266,"title":{},"body":{"classes/ChangePasswordRequestDto.html":{},"classes/ForgotPasswordRequestDto.html":{},"classes/RegisterRequestDto.html":{}}}],["matches(/[a",{"_index":265,"title":{},"body":{"classes/ChangePasswordRequestDto.html":{},"classes/ForgotPasswordRequestDto.html":{},"classes/RegisterRequestDto.html":{}}}],["matching",{"_index":32,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/AuthenticateRequestDto.html":{},"classes/ChangePasswordRequestDto.html":{},"classes/ForgotPasswordRequestDto.html":{},"guards/JwtAuthGuard.html":{},"injectables/PrismaService.html":{},"classes/RegisterRequestDto.html":{},"injectables/SentryInterceptor.html":{},"injectables/TimeoutInterceptor.html":{},"classes/VerifyCodeRequestDto.html":{},"classes/VerifyIdTokenDto.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["merchantability",{"_index":450,"title":{},"body":{"license.html":{}}}],["merge",{"_index":425,"title":{},"body":{"license.html":{}}}],["metadata",{"_index":379,"title":{},"body":{"dependencies.html":{}}}],["methods",{"_index":8,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"guards/JwtAuthGuard.html":{},"injectables/PrismaService.html":{},"injectables/SentryInterceptor.html":{},"injectables/TimeoutInterceptor.html":{}}}],["minlength",{"_index":263,"title":{},"body":{"classes/ChangePasswordRequestDto.html":{},"classes/ForgotPasswordRequestDto.html":{},"classes/RegisterRequestDto.html":{}}}],["minlength(8",{"_index":264,"title":{},"body":{"classes/ChangePasswordRequestDto.html":{},"classes/ForgotPasswordRequestDto.html":{},"classes/RegisterRequestDto.html":{}}}],["miscellaneous",{"_index":384,"title":{"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}},"body":{"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["mit",{"_index":401,"title":{},"body":{"license.html":{},"properties.html":{}}}],["modify",{"_index":424,"title":{},"body":{"license.html":{}}}],["module",{"_index":33,"title":{"modules/AppModule.html":{},"modules/AuthModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{}}}],["modules",{"_index":35,"title":{"modules.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules.html":{},"overview.html":{}}}],["name",{"_index":66,"title":{},"body":{"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/AuthenticateRequestDto.html":{},"classes/ChangePasswordRequestDto.html":{},"classes/ForgotPasswordRequestDto.html":{},"guards/JwtAuthGuard.html":{},"injectables/PrismaService.html":{},"classes/RegisterRequestDto.html":{},"injectables/SentryInterceptor.html":{},"injectables/TimeoutInterceptor.html":{},"classes/VerifyCodeRequestDto.html":{},"miscellaneous/variables.html":{}}}],["nestinterceptor",{"_index":314,"title":{},"body":{"injectables/SentryInterceptor.html":{},"injectables/TimeoutInterceptor.html":{}}}],["nestjs",{"_index":391,"title":{},"body":{"index.html":{}}}],["nestjs/common",{"_index":21,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"guards/JwtAuthGuard.html":{},"injectables/PrismaService.html":{},"injectables/SentryInterceptor.html":{},"injectables/TimeoutInterceptor.html":{},"dependencies.html":{}}}],["nestjs/config",{"_index":52,"title":{},"body":{"modules/AppModule.html":{},"injectables/AuthService.html":{},"dependencies.html":{}}}],["nestjs/core",{"_index":369,"title":{},"body":{"dependencies.html":{}}}],["nestjs/platform",{"_index":370,"title":{},"body":{"dependencies.html":{}}}],["nestjsとprisma",{"_index":482,"title":{},"body":{"properties.html":{}}}],["new",{"_index":136,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/TimeoutInterceptor.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["newpasswordrequired",{"_index":233,"title":{},"body":{"injectables/AuthService.html":{}}}],["newuser",{"_index":231,"title":{},"body":{"injectables/AuthService.html":{}}}],["newuser.authenticateuser(authenticationdetails",{"_index":232,"title":{},"body":{"injectables/AuthService.html":{}}}],["newuser.completenewpasswordchallenge(password",{"_index":236,"title":{},"body":{"injectables/AuthService.html":{}}}],["next",{"_index":310,"title":{},"body":{"injectables/SentryInterceptor.html":{},"injectables/TimeoutInterceptor.html":{}}}],["next.handle",{"_index":316,"title":{},"body":{"injectables/SentryInterceptor.html":{}}}],["next.handle().pipe",{"_index":325,"title":{},"body":{"injectables/TimeoutInterceptor.html":{}}}],["noninfringement",{"_index":454,"title":{},"body":{"license.html":{}}}],["notice",{"_index":439,"title":{},"body":{"license.html":{}}}],["null",{"_index":207,"title":{},"body":{"injectables/AuthService.html":{}}}],["number",{"_index":268,"title":{},"body":{"classes/ForgotPasswordRequestDto.html":{},"classes/VerifyCodeRequestDto.html":{}}}],["observable",{"_index":313,"title":{},"body":{"injectables/SentryInterceptor.html":{},"injectables/TimeoutInterceptor.html":{}}}],["obtaining",{"_index":412,"title":{},"body":{"license.html":{}}}],["old_password",{"_index":224,"title":{},"body":{"injectables/AuthService.html":{},"classes/ChangePasswordRequestDto.html":{}}}],["onfailure",{"_index":228,"title":{},"body":{"injectables/AuthService.html":{}}}],["onmoduleinit",{"_index":291,"title":{},"body":{"injectables/PrismaService.html":{}}}],["onsuccess",{"_index":226,"title":{},"body":{"injectables/AuthService.html":{}}}],["optional",{"_index":68,"title":{},"body":{"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"guards/JwtAuthGuard.html":{},"injectables/PrismaService.html":{},"injectables/SentryInterceptor.html":{},"injectables/TimeoutInterceptor.html":{}}}],["otherwise",{"_index":466,"title":{},"body":{"license.html":{}}}],["out",{"_index":43,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"license.html":{},"overview.html":{}}}],["overview",{"_index":474,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["package",{"_index":363,"title":{"dependencies.html":{},"properties.html":{}},"body":{}}],["parameters",{"_index":65,"title":{},"body":{"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"guards/JwtAuthGuard.html":{},"injectables/PrismaService.html":{},"injectables/SentryInterceptor.html":{},"injectables/TimeoutInterceptor.html":{}}}],["particular",{"_index":452,"title":{},"body":{"license.html":{}}}],["password",{"_index":92,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/AuthenticateRequestDto.html":{},"classes/ChangePasswordRequestDto.html":{},"classes/ForgotPasswordRequestDto.html":{},"classes/RegisterRequestDto.html":{}}}],["permission",{"_index":406,"title":{},"body":{"license.html":{}}}],["permit",{"_index":432,"title":{},"body":{"license.html":{}}}],["person",{"_index":411,"title":{},"body":{"license.html":{}}}],["persons",{"_index":433,"title":{},"body":{"license.html":{}}}],["pool",{"_index":215,"title":{},"body":{"injectables/AuthService.html":{}}}],["portions",{"_index":443,"title":{},"body":{"license.html":{}}}],["post",{"_index":127,"title":{},"body":{"controllers/AuthController.html":{}}}],["post('authenticate",{"_index":86,"title":{},"body":{"controllers/AuthController.html":{}}}],["post('change",{"_index":91,"title":{},"body":{"controllers/AuthController.html":{}}}],["post('forgot",{"_index":97,"title":{},"body":{"controllers/AuthController.html":{}}}],["post('register",{"_index":101,"title":{},"body":{"controllers/AuthController.html":{}}}],["post('reset",{"_index":105,"title":{},"body":{"controllers/AuthController.html":{}}}],["post('verify",{"_index":109,"title":{},"body":{"controllers/AuthController.html":{}}}],["prefix",{"_index":75,"title":{},"body":{"controllers/AuthController.html":{}}}],["prisma",{"_index":69,"title":{},"body":{"injectables/AppService.html":{},"coverage.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["prisma.user.createmany",{"_index":498,"title":{},"body":{"miscellaneous/variables.html":{}}}],["prisma/.../prismaclient.ts",{"_index":488,"title":{},"body":{"miscellaneous/variables.html":{}}}],["prisma/.../seed.ts",{"_index":387,"title":{},"body":{"miscellaneous/functions.html":{}}}],["prisma/.../userseed.ts",{"_index":487,"title":{},"body":{"miscellaneous/variables.html":{}}}],["prisma/client",{"_index":297,"title":{},"body":{"injectables/PrismaService.html":{},"dependencies.html":{}}}],["prisma/prismaclient.ts",{"_index":339,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["prisma/seed.ts",{"_index":342,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["prisma/seeds/userseed.ts",{"_index":344,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["prisma/seeds配下にシードファイルを用意しyarn",{"_index":395,"title":{},"body":{"index.html":{}}}],["prismaclient",{"_index":289,"title":{},"body":{"injectables/PrismaService.html":{},"miscellaneous/variables.html":{}}}],["prismaservice",{"_index":40,"title":{"injectables/PrismaService.html":{}},"body":{"modules/AppModule.html":{},"injectables/AppService.html":{},"injectables/PrismaService.html":{},"coverage.html":{},"overview.html":{}}}],["private",{"_index":157,"title":{},"body":{"injectables/AuthService.html":{},"guards/JwtAuthGuard.html":{}}}],["process.env.cognito_client_id",{"_index":241,"title":{},"body":{"injectables/AuthService.html":{},"guards/JwtAuthGuard.html":{}}}],["process.env.cognito_user_pool_id",{"_index":239,"title":{},"body":{"injectables/AuthService.html":{},"guards/JwtAuthGuard.html":{},"miscellaneous/variables.html":{}}}],["promise((resolve",{"_index":203,"title":{},"body":{"injectables/AuthService.html":{}}}],["properties",{"_index":156,"title":{"properties.html":{}},"body":{"injectables/AuthService.html":{},"classes/AuthenticateRequestDto.html":{},"classes/ChangePasswordRequestDto.html":{},"classes/ForgotPasswordRequestDto.html":{},"guards/JwtAuthGuard.html":{},"classes/RegisterRequestDto.html":{},"classes/VerifyCodeRequestDto.html":{},"classes/VerifyIdTokenDto.html":{},"properties.html":{}}}],["provided",{"_index":444,"title":{},"body":{"license.html":{}}}],["provider",{"_index":365,"title":{},"body":{"dependencies.html":{}}}],["providers",{"_index":45,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{}}}],["publish",{"_index":426,"title":{},"body":{"license.html":{}}}],["purpose",{"_index":453,"title":{},"body":{"license.html":{}}}],["q",{"_index":390,"title":{},"body":{"index.html":{}}}],["readonly",{"_index":27,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{}}}],["reflect",{"_index":378,"title":{},"body":{"dependencies.html":{}}}],["register",{"_index":80,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["register(@body",{"_index":129,"title":{},"body":{"controllers/AuthController.html":{}}}],["register(authregisterrequest",{"_index":168,"title":{},"body":{"injectables/AuthService.html":{}}}],["register(registerrequest",{"_index":99,"title":{},"body":{"controllers/AuthController.html":{}}}],["registerrequest",{"_index":103,"title":{},"body":{"controllers/AuthController.html":{}}}],["registerrequestdto",{"_index":100,"title":{"classes/RegisterRequestDto.html":{}},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/RegisterRequestDto.html":{},"coverage.html":{}}}],["reject",{"_index":204,"title":{},"body":{"injectables/AuthService.html":{}}}],["reject(err",{"_index":210,"title":{},"body":{"injectables/AuthService.html":{}}}],["reject(error",{"_index":222,"title":{},"body":{"injectables/AuthService.html":{}}}],["request",{"_index":283,"title":{},"body":{"guards/JwtAuthGuard.html":{}}}],["request.header('authorization",{"_index":286,"title":{},"body":{"guards/JwtAuthGuard.html":{}}}],["requesttimeoutexception",{"_index":320,"title":{},"body":{"injectables/TimeoutInterceptor.html":{}}}],["requiredattributes",{"_index":235,"title":{},"body":{"injectables/AuthService.html":{}}}],["reset",{"_index":42,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"overview.html":{}}}],["resetpassword",{"_index":81,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["resetpassword(@body",{"_index":144,"title":{},"body":{"controllers/AuthController.html":{}}}],["resetpassword(user",{"_index":104,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["resolve(result",{"_index":223,"title":{},"body":{"injectables/AuthService.html":{}}}],["resolve(result.user",{"_index":211,"title":{},"body":{"injectables/AuthService.html":{}}}],["restriction",{"_index":419,"title":{},"body":{"license.html":{}}}],["result",{"_index":209,"title":{},"body":{"injectables/AuthService.html":{},"guards/JwtAuthGuard.html":{}}}],["results",{"_index":31,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/AuthenticateRequestDto.html":{},"classes/ChangePasswordRequestDto.html":{},"classes/ForgotPasswordRequestDto.html":{},"guards/JwtAuthGuard.html":{},"injectables/PrismaService.html":{},"classes/RegisterRequestDto.html":{},"injectables/SentryInterceptor.html":{},"injectables/TimeoutInterceptor.html":{},"classes/VerifyCodeRequestDto.html":{},"classes/VerifyIdTokenDto.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["return",{"_index":29,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"guards/JwtAuthGuard.html":{},"injectables/SentryInterceptor.html":{},"injectables/TimeoutInterceptor.html":{},"miscellaneous/variables.html":{}}}],["returns",{"_index":15,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"guards/JwtAuthGuard.html":{},"injectables/PrismaService.html":{},"injectables/SentryInterceptor.html":{},"injectables/TimeoutInterceptor.html":{}}}],["rights",{"_index":422,"title":{},"body":{"license.html":{}}}],["rimraf",{"_index":381,"title":{},"body":{"dependencies.html":{}}}],["rxjs",{"_index":315,"title":{},"body":{"injectables/SentryInterceptor.html":{},"injectables/TimeoutInterceptor.html":{},"dependencies.html":{}}}],["rxjs/operators",{"_index":324,"title":{},"body":{"injectables/TimeoutInterceptor.html":{}}}],["scope",{"_index":242,"title":{},"body":{"injectables/AuthService.html":{},"guards/JwtAuthGuard.html":{}}}],["sdk/client",{"_index":364,"title":{},"body":{"dependencies.html":{}}}],["seedコマンドを実行することで、事前にデータをinsert",{"_index":396,"title":{},"body":{"index.html":{}}}],["sell",{"_index":430,"title":{},"body":{"license.html":{}}}],["sentryinterceptor",{"_index":306,"title":{"injectables/SentryInterceptor.html":{}},"body":{"injectables/SentryInterceptor.html":{},"coverage.html":{}}}],["services/app.service",{"_index":23,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{}}}],["services/auth.service",{"_index":49,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{}}}],["services/prisma.service",{"_index":48,"title":{},"body":{"modules/AppModule.html":{},"injectables/AppService.html":{}}}],["shall",{"_index":440,"title":{},"body":{"license.html":{}}}],["software",{"_index":414,"title":{},"body":{"license.html":{}}}],["source",{"_index":4,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/AuthenticateRequestDto.html":{},"classes/ChangePasswordRequestDto.html":{},"classes/ForgotPasswordRequestDto.html":{},"guards/JwtAuthGuard.html":{},"injectables/PrismaService.html":{},"classes/RegisterRequestDto.html":{},"injectables/SentryInterceptor.html":{},"injectables/TimeoutInterceptor.html":{},"classes/VerifyCodeRequestDto.html":{},"classes/VerifyIdTokenDto.html":{}}}],["src/.../main.ts",{"_index":386,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../utils.helper.ts",{"_index":486,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/common/guards/jwt",{"_index":275,"title":{},"body":{"guards/JwtAuthGuard.html":{},"coverage.html":{}}}],["src/common/interceptors/sentry.interceptor.ts",{"_index":307,"title":{},"body":{"injectables/SentryInterceptor.html":{},"coverage.html":{}}}],["src/common/interceptors/sentry.interceptor.ts:11",{"_index":312,"title":{},"body":{"injectables/SentryInterceptor.html":{}}}],["src/common/interceptors/timeout.interceptor.ts",{"_index":318,"title":{},"body":{"injectables/TimeoutInterceptor.html":{},"coverage.html":{}}}],["src/common/interceptors/timeout.interceptor.ts:13",{"_index":319,"title":{},"body":{"injectables/TimeoutInterceptor.html":{}}}],["src/controllers/app.controller.ts",{"_index":6,"title":{},"body":{"controllers/AppController.html":{},"coverage.html":{}}}],["src/controllers/app.controller.ts:11",{"_index":14,"title":{},"body":{"controllers/AppController.html":{}}}],["src/controllers/auth.controller.ts",{"_index":74,"title":{},"body":{"controllers/AuthController.html":{},"coverage.html":{}}}],["src/controllers/auth.controller.ts:21",{"_index":102,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/controllers/auth.controller.ts:30",{"_index":110,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/controllers/auth.controller.ts:39",{"_index":93,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/controllers/auth.controller.ts:48",{"_index":98,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/controllers/auth.controller.ts:57",{"_index":106,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/controllers/auth.controller.ts:66",{"_index":87,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/controllers/auth.controller.ts:76",{"_index":117,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/dto/authenticate.request.dto.ts",{"_index":247,"title":{},"body":{"classes/AuthenticateRequestDto.html":{},"coverage.html":{}}}],["src/dto/authenticate.request.dto.ts:5",{"_index":250,"title":{},"body":{"classes/AuthenticateRequestDto.html":{}}}],["src/dto/authenticate.request.dto.ts:8",{"_index":251,"title":{},"body":{"classes/AuthenticateRequestDto.html":{}}}],["src/dto/changepassword.request.dto.ts",{"_index":253,"title":{},"body":{"classes/ChangePasswordRequestDto.html":{},"coverage.html":{}}}],["src/dto/changepassword.request.dto.ts:12",{"_index":258,"title":{},"body":{"classes/ChangePasswordRequestDto.html":{}}}],["src/dto/changepassword.request.dto.ts:19",{"_index":261,"title":{},"body":{"classes/ChangePasswordRequestDto.html":{}}}],["src/dto/changepassword.request.dto.ts:6",{"_index":254,"title":{},"body":{"classes/ChangePasswordRequestDto.html":{}}}],["src/dto/forgotpassword.dto.ts",{"_index":267,"title":{},"body":{"classes/ForgotPasswordRequestDto.html":{},"coverage.html":{}}}],["src/dto/forgotpassword.dto.ts:16",{"_index":272,"title":{},"body":{"classes/ForgotPasswordRequestDto.html":{}}}],["src/dto/forgotpassword.dto.ts:6",{"_index":271,"title":{},"body":{"classes/ForgotPasswordRequestDto.html":{}}}],["src/dto/forgotpassword.dto.ts:9",{"_index":270,"title":{},"body":{"classes/ForgotPasswordRequestDto.html":{}}}],["src/dto/register.request.dto.ts",{"_index":301,"title":{},"body":{"classes/RegisterRequestDto.html":{},"coverage.html":{}}}],["src/dto/register.request.dto.ts:15",{"_index":305,"title":{},"body":{"classes/RegisterRequestDto.html":{}}}],["src/dto/register.request.dto.ts:5",{"_index":304,"title":{},"body":{"classes/RegisterRequestDto.html":{}}}],["src/dto/register.request.dto.ts:8",{"_index":303,"title":{},"body":{"classes/RegisterRequestDto.html":{}}}],["src/dto/verifycode.request.dto.ts",{"_index":329,"title":{},"body":{"classes/VerifyCodeRequestDto.html":{},"coverage.html":{}}}],["src/dto/verifycode.request.dto.ts:6",{"_index":331,"title":{},"body":{"classes/VerifyCodeRequestDto.html":{}}}],["src/dto/verifycode.request.dto.ts:9",{"_index":330,"title":{},"body":{"classes/VerifyCodeRequestDto.html":{}}}],["src/dto/verifyidtoken.request.dto.ts",{"_index":332,"title":{},"body":{"classes/VerifyIdTokenDto.html":{},"coverage.html":{}}}],["src/dto/verifyidtoken.request.dto.ts:5",{"_index":334,"title":{},"body":{"classes/VerifyIdTokenDto.html":{}}}],["src/helpers/utils.helper.ts",{"_index":354,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/main.ts",{"_index":358,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/modules/app.module.ts",{"_index":44,"title":{},"body":{"modules/AppModule.html":{}}}],["src/modules/auth/auth.module.ts",{"_index":154,"title":{},"body":{"modules/AuthModule.html":{}}}],["src/services/app.service.ts",{"_index":60,"title":{},"body":{"injectables/AppService.html":{},"coverage.html":{}}}],["src/services/app.service.ts:5",{"_index":64,"title":{},"body":{"injectables/AppService.html":{}}}],["src/services/app.service.ts:8",{"_index":70,"title":{},"body":{"injectables/AppService.html":{}}}],["src/services/auth.service.ts",{"_index":155,"title":{},"body":{"injectables/AuthService.html":{},"coverage.html":{}}}],["src/services/auth.service.ts:101",{"_index":167,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/services/auth.service.ts:120",{"_index":171,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/services/auth.service.ts:139",{"_index":165,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/services/auth.service.ts:172",{"_index":173,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/services/auth.service.ts:20",{"_index":163,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/services/auth.service.ts:29",{"_index":169,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/services/auth.service.ts:52",{"_index":176,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/services/auth.service.ts:71",{"_index":166,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/services/prisma.service.ts",{"_index":287,"title":{},"body":{"injectables/PrismaService.html":{},"coverage.html":{}}}],["src/services/prisma.service.ts:10",{"_index":294,"title":{},"body":{"injectables/PrismaService.html":{}}}],["src/services/prisma.service.ts:6",{"_index":296,"title":{},"body":{"injectables/PrismaService.html":{}}}],["start:dev",{"_index":399,"title":{},"body":{"index.html":{}}}],["started",{"_index":389,"title":{"index.html":{},"license.html":{}},"body":{}}],["statements",{"_index":338,"title":{},"body":{"coverage.html":{}}}],["string",{"_index":248,"title":{},"body":{"classes/AuthenticateRequestDto.html":{},"classes/ChangePasswordRequestDto.html":{},"classes/ForgotPasswordRequestDto.html":{},"classes/RegisterRequestDto.html":{},"classes/VerifyCodeRequestDto.html":{},"classes/VerifyIdTokenDto.html":{},"miscellaneous/variables.html":{}}}],["subject",{"_index":435,"title":{},"body":{"license.html":{}}}],["sublicense",{"_index":428,"title":{},"body":{"license.html":{}}}],["substantial",{"_index":442,"title":{},"body":{"license.html":{}}}],["support",{"_index":471,"title":{},"body":{"modules.html":{}}}],["suyama",{"_index":484,"title":{},"body":{"properties.html":{}}}],["svg",{"_index":472,"title":{},"body":{"modules.html":{}}}],["table",{"_index":362,"title":{},"body":{"coverage.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":361,"title":{},"body":{"coverage.html":{}}}],["this.$connect",{"_index":298,"title":{},"body":{"injectables/PrismaService.html":{}}}],["this.$on('beforeexit",{"_index":299,"title":{},"body":{"injectables/PrismaService.html":{}}}],["this.appservice.gethello",{"_index":30,"title":{},"body":{"controllers/AppController.html":{}}}],["this.authservice.authenticate(authenticaterequest",{"_index":147,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.authservice.changepassword(user",{"_index":141,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.authservice.forgotpassword(user",{"_index":143,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.authservice.register(registerrequest",{"_index":132,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.authservice.resetpassword(user",{"_index":145,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.authservice.verifyaccesstoken(body",{"_index":150,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.authservice.verifyemail(verifyrequest",{"_index":139,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.configservice.get('cognito_client_id",{"_index":194,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.configservice.get('cognito_user_pool_id",{"_index":192,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.jwtverifier.verify",{"_index":285,"title":{},"body":{"guards/JwtAuthGuard.html":{}}}],["this.userpool",{"_index":190,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.userpool.signup",{"_index":205,"title":{},"body":{"injectables/AuthService.html":{}}}],["throw",{"_index":135,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/TimeoutInterceptor.html":{}}}],["timeout",{"_index":323,"title":{},"body":{"injectables/TimeoutInterceptor.html":{}}}],["timeout(5000",{"_index":326,"title":{},"body":{"injectables/TimeoutInterceptor.html":{}}}],["timeouterror",{"_index":321,"title":{},"body":{"injectables/TimeoutInterceptor.html":{}}}],["timeoutinterceptor",{"_index":317,"title":{"injectables/TimeoutInterceptor.html":{}},"body":{"injectables/TimeoutInterceptor.html":{},"coverage.html":{}}}],["token",{"_index":116,"title":{},"body":{"controllers/AuthController.html":{}}}],["tokenuse",{"_index":240,"title":{},"body":{"injectables/AuthService.html":{},"guards/JwtAuthGuard.html":{}}}],["tort",{"_index":465,"title":{},"body":{"license.html":{}}}],["true",{"_index":219,"title":{},"body":{"injectables/AuthService.html":{}}}],["try",{"_index":130,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"guards/JwtAuthGuard.html":{}}}],["type",{"_index":67,"title":{},"body":{"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/AuthenticateRequestDto.html":{},"classes/ChangePasswordRequestDto.html":{},"classes/ForgotPasswordRequestDto.html":{},"guards/JwtAuthGuard.html":{},"injectables/PrismaService.html":{},"classes/RegisterRequestDto.html":{},"injectables/SentryInterceptor.html":{},"injectables/TimeoutInterceptor.html":{},"classes/VerifyCodeRequestDto.html":{},"classes/VerifyIdTokenDto.html":{},"coverage.html":{}}}],["unknown",{"_index":71,"title":{},"body":{"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"guards/JwtAuthGuard.html":{}}}],["up:db",{"_index":394,"title":{},"body":{"index.html":{}}}],["use",{"_index":423,"title":{},"body":{"license.html":{}}}],["useguards",{"_index":20,"title":{},"body":{"controllers/AppController.html":{}}}],["useguards(jwtauthguard",{"_index":28,"title":{},"body":{"controllers/AppController.html":{}}}],["useguards(jwtauthguard)@get",{"_index":12,"title":{},"body":{"controllers/AppController.html":{}}}],["user",{"_index":94,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"miscellaneous/variables.html":{}}}],["userattributes",{"_index":234,"title":{},"body":{"injectables/AuthService.html":{}}}],["userdata",{"_index":213,"title":{},"body":{"injectables/AuthService.html":{}}}],["username",{"_index":214,"title":{},"body":{"injectables/AuthService.html":{}}}],["userpool",{"_index":158,"title":{},"body":{"injectables/AuthService.html":{}}}],["userpoolid",{"_index":191,"title":{},"body":{"injectables/AuthService.html":{},"guards/JwtAuthGuard.html":{},"miscellaneous/variables.html":{}}}],["userreq",{"_index":174,"title":{},"body":{"injectables/AuthService.html":{}}}],["users",{"_index":494,"title":{},"body":{"miscellaneous/variables.html":{}}}],["userseed",{"_index":497,"title":{},"body":{"miscellaneous/variables.html":{}}}],["validator",{"_index":252,"title":{},"body":{"classes/AuthenticateRequestDto.html":{},"classes/ChangePasswordRequestDto.html":{},"classes/ForgotPasswordRequestDto.html":{},"classes/RegisterRequestDto.html":{},"classes/VerifyCodeRequestDto.html":{},"classes/VerifyIdTokenDto.html":{},"dependencies.html":{}}}],["value",{"_index":206,"title":{},"body":{"injectables/AuthService.html":{},"miscellaneous/variables.html":{}}}],["variable",{"_index":340,"title":{},"body":{"coverage.html":{}}}],["variables",{"_index":485,"title":{"miscellaneous/variables.html":{}},"body":{"miscellaneous/variables.html":{}}}],["verify",{"_index":82,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"guards/JwtAuthGuard.html":{},"dependencies.html":{}}}],["verify(@body",{"_index":138,"title":{},"body":{"controllers/AuthController.html":{}}}],["verify(verifyrequest",{"_index":107,"title":{},"body":{"controllers/AuthController.html":{}}}],["verifyaccesstoken",{"_index":159,"title":{},"body":{"injectables/AuthService.html":{}}}],["verifyaccesstoken(userreq",{"_index":172,"title":{},"body":{"injectables/AuthService.html":{}}}],["verifycoderequestdto",{"_index":108,"title":{"classes/VerifyCodeRequestDto.html":{}},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/VerifyCodeRequestDto.html":{},"coverage.html":{}}}],["verifyemail",{"_index":160,"title":{},"body":{"injectables/AuthService.html":{}}}],["verifyemail(user",{"_index":175,"title":{},"body":{"injectables/AuthService.html":{}}}],["verifyidtoken",{"_index":83,"title":{},"body":{"controllers/AuthController.html":{}}}],["verifyidtoken(@body",{"_index":149,"title":{},"body":{"controllers/AuthController.html":{}}}],["verifyidtoken(body",{"_index":112,"title":{},"body":{"controllers/AuthController.html":{}}}],["verifyidtokendto",{"_index":113,"title":{"classes/VerifyIdTokenDto.html":{}},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/VerifyIdTokenDto.html":{},"coverage.html":{}}}],["verifyrequest",{"_index":111,"title":{},"body":{"controllers/AuthController.html":{}}}],["version",{"_index":479,"title":{},"body":{"properties.html":{}}}],["warranties",{"_index":449,"title":{},"body":{"license.html":{}}}],["warranty",{"_index":445,"title":{},"body":{"license.html":{}}}],["whether",{"_index":462,"title":{},"body":{"license.html":{}}}],["without",{"_index":418,"title":{},"body":{"license.html":{}}}],["world",{"_index":73,"title":{},"body":{"injectables/AppService.html":{}}}],["yarn",{"_index":393,"title":{},"body":{"index.html":{}}}],["z",{"_index":257,"title":{},"body":{"classes/ChangePasswordRequestDto.html":{},"classes/ForgotPasswordRequestDto.html":{},"classes/RegisterRequestDto.html":{}}}],["z]/)@matches(/[0",{"_index":259,"title":{},"body":{"classes/ChangePasswordRequestDto.html":{},"classes/ForgotPasswordRequestDto.html":{},"classes/RegisterRequestDto.html":{}}}],["z]/)@matches(/[a",{"_index":256,"title":{},"body":{"classes/ChangePasswordRequestDto.html":{},"classes/ForgotPasswordRequestDto.html":{},"classes/RegisterRequestDto.html":{}}}],["zoom",{"_index":41,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"overview.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"controllers/AppController.html":{"url":"controllers/AppController.html","title":"controller - AppController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AppController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/controllers/app.controller.ts\n        \n\n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getHello\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        getHello\n                        \n                    \n                \n            \n            \n                \ngetHello()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(JwtAuthGuard)@Get()\n                \n            \n\n            \n                \n                    Defined in src/controllers/app.controller.ts:11\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { JwtAuthGuard } from '@/common/guards/jwt-auth.guard';\nimport { Controller, Get, UseGuards } from '@nestjs/common';\nimport { AppService } from '@services/app.service';\n\n@Controller()\nexport class AppController {\n  constructor(private readonly appService: AppService) {}\n\n  @UseGuards(JwtAuthGuard)\n  @Get()\n  getHello() {\n    return this.appService.getHello();\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AppModule.html":{"url":"modules/AppModule.html","title":"module - AppModule","body":"\n                   \n\n\n\n\n    Modules\n    AppModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_AppModule\n\n\n\ncluster_AppModule_providers\n\n\n\n\nAppService\n\nAppService\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAppService->AppModule\n\n\n\n\n\nAuthService\n\nAuthService\n\nAppModule -->\n\nAuthService->AppModule\n\n\n\n\n\nPrismaService\n\nPrismaService\n\nAppModule -->\n\nPrismaService->AppModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/modules/app.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AppService\n                        \n                        \n                            AuthService\n                        \n                        \n                            PrismaService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AppController\n                        \n                        \n                            AuthController\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { AppController } from '@controllers/app.controller';\nimport { Module } from '@nestjs/common';\nimport { AppService } from '@services/app.service';\nimport { PrismaService } from '@services/prisma.service';\nimport { AuthService } from '../services/auth.service';\nimport { AuthController } from '../controllers/auth.controller';\nimport { ConfigModule } from '@nestjs/config';\nimport configuration from '../config/configuration';\n\n@Module({\n  imports: [\n    ConfigModule.forRoot({\n      load: [configuration],\n    }),\n  ],\n  controllers: [AppController, AuthController],\n  providers: [AppService, PrismaService, AuthService],\n})\nexport class AppModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AppService.html":{"url":"injectables/AppService.html","title":"injectable - AppService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AppService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/services/app.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                getHello\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(prisma: PrismaService)\n                    \n                \n                        \n                            \n                                Defined in src/services/app.service.ts:5\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        prisma\n                                                  \n                                                        \n                                                                        PrismaService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getHello\n                        \n                    \n                \n            \n            \n                \n                    \n                    getHello()\n                \n            \n\n\n            \n                \n                    Defined in src/services/app.service.ts:8\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     unknown\n\n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { PrismaService } from '@services/prisma.service';\n\n@Injectable()\nexport class AppService {\n  constructor(private prisma: PrismaService) {}\n\n  async getHello() {\n    return 'Hello World!';\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/AuthController.html":{"url":"controllers/AuthController.html","title":"controller - AuthController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AuthController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/controllers/auth.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                auth\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                authenticate\n                            \n                            \n                                    Async\n                                changePassword\n                            \n                            \n                                    Async\n                                forgotPassword\n                            \n                            \n                                    Async\n                                register\n                            \n                            \n                                    Async\n                                resetPassword\n                            \n                            \n                                    Async\n                                verify\n                            \n                            \n                                    Async\n                                verifyIdToken\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        authenticate\n                        \n                    \n                \n            \n            \n                \n                    \n                    authenticate(authenticateRequest: AuthenticateRequestDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('authenticate')\n                \n            \n\n            \n                \n                    Defined in src/controllers/auth.controller.ts:66\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    authenticateRequest\n                                    \n                                                AuthenticateRequestDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        changePassword\n                        \n                    \n                \n            \n            \n                \n                    \n                    changePassword(user: ChangePasswordRequestDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('change-password')\n                \n            \n\n            \n                \n                    Defined in src/controllers/auth.controller.ts:39\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                                ChangePasswordRequestDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        forgotPassword\n                        \n                    \n                \n            \n            \n                \n                    \n                    forgotPassword(user: ForgotPasswordRequestDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('forgot-password')\n                \n            \n\n            \n                \n                    Defined in src/controllers/auth.controller.ts:48\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                                ForgotPasswordRequestDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        register\n                        \n                    \n                \n            \n            \n                \n                    \n                    register(registerRequest: RegisterRequestDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('register')\n                \n            \n\n            \n                \n                    Defined in src/controllers/auth.controller.ts:21\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    registerRequest\n                                    \n                                                RegisterRequestDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        resetPassword\n                        \n                    \n                \n            \n            \n                \n                    \n                    resetPassword(user: ForgotPasswordRequestDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('reset-password')\n                \n            \n\n            \n                \n                    Defined in src/controllers/auth.controller.ts:57\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                                ForgotPasswordRequestDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        verify\n                        \n                    \n                \n            \n            \n                \n                    \n                    verify(verifyRequest: VerifyCodeRequestDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('verify')\n                \n            \n\n            \n                \n                    Defined in src/controllers/auth.controller.ts:30\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    verifyRequest\n                                    \n                                                VerifyCodeRequestDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        verifyIdToken\n                        \n                    \n                \n            \n            \n                \n                    \n                    verifyIdToken(body: VerifyIdTokenDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @HttpCode(200)@Post('verify-access-token')\n                \n            \n\n            \n                \n                    Defined in src/controllers/auth.controller.ts:76\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    body\n                                    \n                                                VerifyIdTokenDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { AuthenticateRequestDto } from '@/dto/authenticate.request.dto';\nimport { ChangePasswordRequestDto } from '@/dto/changePassword.request.dto';\nimport { ForgotPasswordRequestDto } from '@/dto/forgotPassword.dto';\nimport { RegisterRequestDto } from '@/dto/register.request.dto';\nimport { VerifyCodeRequestDto } from '@/dto/verifyCode.request.dto';\nimport { VerifyIdTokenDto } from '@/dto/verifyIdToken.request.dto';\nimport {\n  BadRequestException,\n  Body,\n  Controller,\n  HttpCode,\n  Post,\n} from '@nestjs/common';\nimport { AuthService } from '@services/auth.service';\n\n@Controller('auth')\nexport class AuthController {\n  constructor(private readonly authService: AuthService) {}\n\n  @Post('register')\n  async register(@Body() registerRequest: RegisterRequestDto) {\n    try {\n      return await this.authService.register(registerRequest);\n    } catch (e) {\n      throw new BadRequestException(e.message);\n    }\n  }\n\n  @Post('verify')\n  async verify(@Body() verifyRequest: VerifyCodeRequestDto) {\n    try {\n      return await this.authService.verifyEmail(verifyRequest);\n    } catch (e) {\n      throw new BadRequestException(e.message);\n    }\n  }\n\n  @Post('change-password')\n  async changePassword(@Body() user: ChangePasswordRequestDto) {\n    try {\n      return await this.authService.changePassword(user);\n    } catch (e) {\n      throw new BadRequestException(e.message);\n    }\n  }\n\n  @Post('forgot-password')\n  async forgotPassword(@Body() user: ForgotPasswordRequestDto) {\n    try {\n      return await this.authService.forgotPassword(user);\n    } catch (e) {\n      throw new BadRequestException(e.message);\n    }\n  }\n\n  @Post('reset-password')\n  async resetPassword(@Body() user: ForgotPasswordRequestDto) {\n    try {\n      return await this.authService.resetPassword(user);\n    } catch (e) {\n      throw new BadRequestException(e.message);\n    }\n  }\n\n  @Post('authenticate')\n  async authenticate(@Body() authenticateRequest: AuthenticateRequestDto) {\n    try {\n      return await this.authService.authenticate(authenticateRequest);\n    } catch (e) {\n      throw new BadRequestException(e.message);\n    }\n  }\n\n  @HttpCode(200)\n  @Post('verify-access-token')\n  async verifyIdToken(@Body() body: VerifyIdTokenDto) {\n    try {\n      return await this.authService.verifyAccessToken(body);\n    } catch (e) {\n      throw new BadRequestException(e.message);\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AuthModule.html":{"url":"modules/AuthModule.html","title":"module - AuthModule","body":"\n                   \n\n\n\n\n    Modules\n    AuthModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_providers\n\n\n\n\nAuthService\n\nAuthService\n\n\n\nAuthModule\n\nAuthModule\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/modules/auth/auth.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AuthService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AuthController\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { AuthController } from '@controllers/auth.controller';\nimport { Module } from '@nestjs/common';\nimport { AuthService } from '@services/auth.service';\n\n@Module({\n  controllers: [AuthController],\n  providers: [AuthService],\n})\nexport class AuthModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AuthService.html":{"url":"injectables/AuthService.html","title":"injectable - AuthService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AuthService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/services/auth.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                userPool\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                authenticate\n                            \n                            \n                                    Async\n                                changePassword\n                            \n                            \n                                    Async\n                                forgotPassword\n                            \n                            \n                                    Async\n                                register\n                            \n                            \n                                    Async\n                                resetPassword\n                            \n                            \n                                    Async\n                                verifyAccessToken\n                            \n                            \n                                    Async\n                                verifyEmail\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(configService: ConfigService)\n                    \n                \n                        \n                            \n                                Defined in src/services/auth.service.ts:20\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        authenticate\n                        \n                    \n                \n            \n            \n                \n                    \n                    authenticate(user: AuthenticateRequestDto)\n                \n            \n\n\n            \n                \n                    Defined in src/services/auth.service.ts:139\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                                AuthenticateRequestDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        changePassword\n                        \n                    \n                \n            \n            \n                \n                    \n                    changePassword(user: ChangePasswordRequestDto)\n                \n            \n\n\n            \n                \n                    Defined in src/services/auth.service.ts:71\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                                ChangePasswordRequestDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        forgotPassword\n                        \n                    \n                \n            \n            \n                \n                    \n                    forgotPassword(user: ForgotPasswordRequestDto)\n                \n            \n\n\n            \n                \n                    Defined in src/services/auth.service.ts:101\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                                ForgotPasswordRequestDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        register\n                        \n                    \n                \n            \n            \n                \n                    \n                    register(authRegisterRequest: RegisterRequestDto)\n                \n            \n\n\n            \n                \n                    Defined in src/services/auth.service.ts:29\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    authRegisterRequest\n                                    \n                                                RegisterRequestDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        resetPassword\n                        \n                    \n                \n            \n            \n                \n                    \n                    resetPassword(user: ForgotPasswordRequestDto)\n                \n            \n\n\n            \n                \n                    Defined in src/services/auth.service.ts:120\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                                ForgotPasswordRequestDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        verifyAccessToken\n                        \n                    \n                \n            \n            \n                \n                    \n                    verifyAccessToken(userReq: VerifyIdTokenDto)\n                \n            \n\n\n            \n                \n                    Defined in src/services/auth.service.ts:172\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userReq\n                                    \n                                                VerifyIdTokenDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        verifyEmail\n                        \n                    \n                \n            \n            \n                \n                    \n                    verifyEmail(user: VerifyCodeRequestDto)\n                \n            \n\n\n            \n                \n                    Defined in src/services/auth.service.ts:52\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                                VerifyCodeRequestDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        userPool\n                        \n                    \n                \n            \n                \n                    \n                        Type :     CognitoUserPool\n\n                    \n                \n                    \n                        \n                                Defined in src/services/auth.service.ts:20\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport {\n  AuthenticationDetails,\n  CognitoUser,\n  CognitoUserAttribute,\n  CognitoUserPool,\n} from 'amazon-cognito-identity-js';\nimport { ConfigService } from '@nestjs/config';\nimport { RegisterRequestDto } from '@/dto/register.request.dto';\nimport { AuthenticateRequestDto } from '@/dto/authenticate.request.dto';\nimport { VerifyCodeRequestDto } from '@/dto/verifyCode.request.dto';\nimport { ChangePasswordRequestDto } from '@/dto/changePassword.request.dto';\nimport { fetchListUsers } from '@/helpers/utils.helper';\nimport { ForgotPasswordRequestDto } from '@/dto/forgotPassword.dto';\nimport { CognitoJwtVerifier } from 'aws-jwt-verify';\nimport { VerifyIdTokenDto } from '@/dto/verifyIdToken.request.dto';\n\n@Injectable()\nexport class AuthService {\n  private userPool: CognitoUserPool;\n\n  constructor(private configService: ConfigService) {\n    this.userPool = new CognitoUserPool({\n      UserPoolId: this.configService.get('COGNITO_USER_POOL_ID'),\n      ClientId: this.configService.get('COGNITO_CLIENT_ID'),\n    });\n  }\n\n  async register(authRegisterRequest: RegisterRequestDto) {\n    const { name, email, password } = authRegisterRequest;\n    // メールアドレスの重複がないかチェックする\n    const existedUser = await fetchListUsers(email);\n    if (existedUser.length > 0) throw new Error('The email is duplicated.');\n\n    return new Promise((resolve, reject) => {\n      return this.userPool.signUp(\n        name,\n        password,\n        [new CognitoUserAttribute({ Name: 'email', Value: email })],\n        null,\n        (err, result) => {\n          if (!result) {\n            reject(err);\n          } else {\n            resolve(result.user);\n          }\n        },\n      );\n    });\n  }\n\n  async verifyEmail(user: VerifyCodeRequestDto) {\n    const { name, code } = user;\n    const userData = {\n      Username: name,\n      Pool: this.userPool,\n    };\n    const cognitoUser = new CognitoUser(userData);\n    return new Promise((resolve, reject) => {\n      return cognitoUser.confirmRegistration(\n        code.toString(),\n        true,\n        function (error, result) {\n          if (error) reject(error);\n          resolve(result);\n        },\n      );\n    });\n  }\n\n  async changePassword(user: ChangePasswordRequestDto) {\n    const { name, old_password, password } = user;\n    const userData = {\n      Username: name,\n      Pool: this.userPool,\n    };\n    const cognitoUser = new CognitoUser(userData);\n    const authenticationDetails = new AuthenticationDetails({\n      Username: name,\n      Password: old_password,\n    });\n    return new Promise((resolve, reject) => {\n      cognitoUser.authenticateUser(authenticationDetails, {\n        onSuccess: () => {\n          cognitoUser.changePassword(\n            old_password,\n            password,\n            function (error, result) {\n              if (error) reject(error);\n              resolve(result);\n            },\n          );\n        },\n        onFailure: (err) => {\n          reject(err);\n        },\n      });\n    });\n  }\n\n  async forgotPassword(user: ForgotPasswordRequestDto) {\n    const { name } = user;\n    const userData = {\n      Username: name,\n      Pool: this.userPool,\n    };\n    const cognitoUser = new CognitoUser(userData);\n    return new Promise((resolve, reject) => {\n      cognitoUser.forgotPassword({\n        onSuccess: (result) => {\n          resolve(result);\n        },\n        onFailure: (err) => {\n          reject(err);\n        },\n      });\n    });\n  }\n\n  async resetPassword(user: ForgotPasswordRequestDto) {\n    const { name, code, password } = user;\n    const userData = {\n      Username: name,\n      Pool: this.userPool,\n    };\n    const cognitoUser = new CognitoUser(userData);\n    return new Promise((resolve, reject) => {\n      cognitoUser.confirmPassword(code.toString(), password, {\n        onSuccess: (result) => {\n          resolve(result);\n        },\n        onFailure: (err) => {\n          reject(err);\n        },\n      });\n    });\n  }\n\n  async authenticate(user: AuthenticateRequestDto) {\n    const { name, password } = user;\n    const authenticationDetails = new AuthenticationDetails({\n      Username: name,\n      Password: password,\n    });\n    const userData = {\n      Username: name,\n      Pool: this.userPool,\n    };\n    const newUser = new CognitoUser(userData);\n    return new Promise((resolve, reject) => {\n      return newUser.authenticateUser(authenticationDetails, {\n        onSuccess: (result) => {\n          resolve(result);\n        },\n        onFailure: (err) => {\n          reject(err);\n        },\n        newPasswordRequired: (userAttributes, requiredAttributes) => {\n          newUser.completeNewPasswordChallenge(password, requiredAttributes, {\n            onSuccess: function (result) {\n              resolve(result);\n            },\n            onFailure: function (error) {\n              reject(error);\n            },\n          });\n        },\n      });\n    });\n  }\n\n  async verifyAccessToken(userReq: VerifyIdTokenDto) {\n    const jwtVerifier = CognitoJwtVerifier.create({\n      userPoolId: process.env.COGNITO_USER_POOL_ID,\n      tokenUse: 'access',\n      clientId: process.env.COGNITO_CLIENT_ID,\n      scope: 'aws.cognito.signin.user.admin',\n    });\n\n    try {\n      const result = await jwtVerifier.verify(userReq.accessToken);\n      return !!result;\n    } catch (error) {\n      return false;\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/AuthenticateRequestDto.html":{"url":"classes/AuthenticateRequestDto.html","title":"class - AuthenticateRequestDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  AuthenticateRequestDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/dto/authenticate.request.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                name\n                            \n                            \n                                password\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/dto/authenticate.request.dto.ts:5\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/dto/authenticate.request.dto.ts:8\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsString } from 'class-validator';\n\nexport class AuthenticateRequestDto {\n  @IsString()\n  name: string;\n\n  @IsString()\n  password: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ChangePasswordRequestDto.html":{"url":"classes/ChangePasswordRequestDto.html","title":"class - ChangePasswordRequestDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ChangePasswordRequestDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/dto/changePassword.request.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                name\n                            \n                            \n                                old_password\n                            \n                            \n                                password\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/dto/changePassword.request.dto.ts:6\n                        \n                    \n\n            \n                \n                    name or Email\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        old_password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@MinLength(8)@Matches(/[a-z]/)@Matches(/[A-Z]/)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/dto/changePassword.request.dto.ts:12\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@MinLength(8)@Matches(/[a-z]/)@Matches(/[A-Z]/)@Matches(/[0-9]/)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/dto/changePassword.request.dto.ts:19\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsString, Matches, MinLength } from 'class-validator';\n\nexport class ChangePasswordRequestDto {\n  /** name or Email */\n  @IsString()\n  name: string;\n\n  @IsString()\n  @MinLength(8)\n  @Matches(/[a-z]/)\n  @Matches(/[A-Z]/)\n  old_password: string;\n\n  @IsString()\n  @MinLength(8)\n  @Matches(/[a-z]/)\n  @Matches(/[A-Z]/)\n  @Matches(/[0-9]/)\n  password: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ForgotPasswordRequestDto.html":{"url":"classes/ForgotPasswordRequestDto.html","title":"class - ForgotPasswordRequestDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ForgotPasswordRequestDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/dto/forgotPassword.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                code\n                            \n                            \n                                name\n                            \n                            \n                                password\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        code\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNumber()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/dto/forgotPassword.dto.ts:9\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/dto/forgotPassword.dto.ts:6\n                        \n                    \n\n            \n                \n                    name or Email\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@MinLength(8)@Matches(/[a-z]/)@Matches(/[A-Z]/)@Matches(/[0-9]/)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/dto/forgotPassword.dto.ts:16\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsNumber, IsString, Matches, MinLength } from 'class-validator';\n\nexport class ForgotPasswordRequestDto {\n  /** name or Email */\n  @IsString()\n  name: string;\n\n  @IsNumber()\n  code: number;\n\n  @IsString()\n  @MinLength(8)\n  @Matches(/[a-z]/)\n  @Matches(/[A-Z]/)\n  @Matches(/[0-9]/)\n  password: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"guards/JwtAuthGuard.html":{"url":"guards/JwtAuthGuard.html","title":"guard - JwtAuthGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n    Guards\n    JwtAuthGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n        \n            \n            File\n            \n            \n                src/common/guards/jwt-auth.guard.ts\n            \n\n\n\n\n\n\n                \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                jwtVerifier\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                canActivate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n                \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        canActivate\n                        \n                    \n                \n            \n            \n                \n                    \n                    canActivate(context: ExecutionContext)\n                \n            \n\n\n            \n                \n                    Defined in src/common/guards/jwt-auth.guard.ts:12\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    context\n                                    \n                                            ExecutionContext\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n        \n\n\n        \n            import { CanActivate, ExecutionContext, Injectable } from '@nestjs/common';\nimport { CognitoJwtVerifier } from 'aws-jwt-verify';\n\n@Injectable()\nexport class JwtAuthGuard implements CanActivate {\n  private jwtVerifier = CognitoJwtVerifier.create({\n    userPoolId: process.env.COGNITO_USER_POOL_ID,\n    tokenUse: 'access',\n    clientId: process.env.COGNITO_CLIENT_ID,\n    scope: 'aws.cognito.signin.user.admin',\n  });\n  async canActivate(context: ExecutionContext) {\n    const request = context.switchToHttp().getRequest();\n    try {\n      const result = await this.jwtVerifier.verify(\n        request.header('authorization'),\n      );\n      return !!result;\n    } catch (error) {\n      return false;\n    }\n  }\n}\n\n        \n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/PrismaService.html":{"url":"injectables/PrismaService.html","title":"injectable - PrismaService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  PrismaService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/services/prisma.service.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                    PrismaClient\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                enableShutdownHooks\n                            \n                            \n                                    Async\n                                onModuleInit\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        enableShutdownHooks\n                        \n                    \n                \n            \n            \n                \n                    \n                    enableShutdownHooks(app: INestApplication)\n                \n            \n\n\n            \n                \n                    Defined in src/services/prisma.service.ts:10\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    app\n                                    \n                                            INestApplication\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        onModuleInit\n                        \n                    \n                \n            \n            \n                \n                    \n                    onModuleInit()\n                \n            \n\n\n            \n                \n                    Defined in src/services/prisma.service.ts:6\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, OnModuleInit, INestApplication } from '@nestjs/common';\nimport { PrismaClient } from '@prisma/client';\n\n@Injectable()\nexport class PrismaService extends PrismaClient implements OnModuleInit {\n  async onModuleInit() {\n    await this.$connect();\n  }\n\n  async enableShutdownHooks(app: INestApplication) {\n    this.$on('beforeExit', async () => {\n      await app.close();\n    });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/RegisterRequestDto.html":{"url":"classes/RegisterRequestDto.html","title":"class - RegisterRequestDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  RegisterRequestDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/dto/register.request.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                email\n                            \n                            \n                                name\n                            \n                            \n                                password\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsEmail()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/dto/register.request.dto.ts:8\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/dto/register.request.dto.ts:5\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@MinLength(8)@Matches(/[a-z]/)@Matches(/[A-Z]/)@Matches(/[0-9]/)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/dto/register.request.dto.ts:15\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsEmail, IsString, Matches, MinLength } from 'class-validator';\n\nexport class RegisterRequestDto {\n  @IsString()\n  name: string;\n\n  @IsEmail()\n  email: string;\n\n  @IsString()\n  @MinLength(8)\n  @Matches(/[a-z]/)\n  @Matches(/[A-Z]/)\n  @Matches(/[0-9]/)\n  password: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/SentryInterceptor.html":{"url":"injectables/SentryInterceptor.html","title":"injectable - SentryInterceptor","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  SentryInterceptor\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/interceptors/sentry.interceptor.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                intercept\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        intercept\n                        \n                    \n                \n            \n            \n                \nintercept(context: ExecutionContext, next: CallHandler)\n                \n            \n\n\n            \n                \n                    Defined in src/common/interceptors/sentry.interceptor.ts:11\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    context\n                                    \n                                            ExecutionContext\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    next\n                                    \n                                            CallHandler\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Observable\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  CallHandler,\n  ExecutionContext,\n  Injectable,\n  NestInterceptor,\n} from '@nestjs/common';\nimport { Observable } from 'rxjs';\n\n@Injectable()\nexport class SentryInterceptor implements NestInterceptor {\n  intercept(context: ExecutionContext, next: CallHandler): Observable {\n    return next.handle();\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/TimeoutInterceptor.html":{"url":"injectables/TimeoutInterceptor.html","title":"injectable - TimeoutInterceptor","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  TimeoutInterceptor\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/interceptors/timeout.interceptor.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                intercept\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        intercept\n                        \n                    \n                \n            \n            \n                \nintercept(context: ExecutionContext, next: CallHandler)\n                \n            \n\n\n            \n                \n                    Defined in src/common/interceptors/timeout.interceptor.ts:13\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    context\n                                    \n                                            ExecutionContext\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    next\n                                    \n                                            CallHandler\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Observable\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  Injectable,\n  NestInterceptor,\n  ExecutionContext,\n  CallHandler,\n  RequestTimeoutException,\n} from '@nestjs/common';\nimport { Observable, TimeoutError } from 'rxjs';\nimport { catchError, timeout } from 'rxjs/operators';\n\n@Injectable()\nexport class TimeoutInterceptor implements NestInterceptor {\n  intercept(context: ExecutionContext, next: CallHandler): Observable {\n    return next.handle().pipe(\n      timeout(5000),\n      catchError((err) => {\n        if (err instanceof TimeoutError) {\n          throw new RequestTimeoutException();\n        }\n        throw err;\n      }),\n    );\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/VerifyCodeRequestDto.html":{"url":"classes/VerifyCodeRequestDto.html","title":"class - VerifyCodeRequestDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  VerifyCodeRequestDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/dto/verifyCode.request.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                code\n                            \n                            \n                                name\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        code\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNumber()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/dto/verifyCode.request.dto.ts:9\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/dto/verifyCode.request.dto.ts:6\n                        \n                    \n\n            \n                \n                    name or Email\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsNumber, IsString } from 'class-validator';\n\nexport class VerifyCodeRequestDto {\n  /** name or Email */\n  @IsString()\n  name: string;\n\n  @IsNumber()\n  code: number;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/VerifyIdTokenDto.html":{"url":"classes/VerifyIdTokenDto.html","title":"class - VerifyIdTokenDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  VerifyIdTokenDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/dto/verifyIdToken.request.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                accessToken\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        accessToken\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/dto/verifyIdToken.request.dto.ts:5\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsString } from 'class-validator';\n\nexport class VerifyIdTokenDto {\n  @IsString()\n  accessToken: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                prisma/prismaClient.ts\n            \n            variable\n            prisma\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                prisma/seed.ts\n            \n            function\n            main\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                prisma/seeds/userSeed.ts\n            \n            variable\n            createUserSeed\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/common/guards/jwt-auth.guard.ts\n            \n            guard\n            JwtAuthGuard\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/common/interceptors/sentry.interceptor.ts\n            \n            injectable\n            SentryInterceptor\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/common/interceptors/timeout.interceptor.ts\n            \n            injectable\n            TimeoutInterceptor\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/controllers/app.controller.ts\n            \n            controller\n            AppController\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/controllers/auth.controller.ts\n            \n            controller\n            AuthController\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                src/dto/authenticate.request.dto.ts\n            \n            class\n            AuthenticateRequestDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/dto/changePassword.request.dto.ts\n            \n            class\n            ChangePasswordRequestDto\n            \n                25 %\n                (1/4)\n            \n        \n        \n            \n                \n                src/dto/forgotPassword.dto.ts\n            \n            class\n            ForgotPasswordRequestDto\n            \n                25 %\n                (1/4)\n            \n        \n        \n            \n                \n                src/dto/register.request.dto.ts\n            \n            class\n            RegisterRequestDto\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/dto/verifyCode.request.dto.ts\n            \n            class\n            VerifyCodeRequestDto\n            \n                33 %\n                (1/3)\n            \n        \n        \n            \n                \n                src/dto/verifyIdToken.request.dto.ts\n            \n            class\n            VerifyIdTokenDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/helpers/utils.helper.ts\n            \n            variable\n            cognitoClient\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/helpers/utils.helper.ts\n            \n            variable\n            fetchListUsers\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/main.ts\n            \n            function\n            bootstrap\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/services/app.service.ts\n            \n            injectable\n            AppService\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/services/auth.service.ts\n            \n            injectable\n            AuthService\n            \n                0 %\n                (0/10)\n            \n        \n        \n            \n                \n                src/services/prisma.service.ts\n            \n            injectable\n            PrismaService\n            \n                0 %\n                (0/3)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @aws-sdk/client-cognito-identity-provider : ^3.218.0\n        \n            @nestjs/common : ^9.0.0\n        \n            @nestjs/config : ^2.2.0\n        \n            @nestjs/core : ^9.0.0\n        \n            @nestjs/platform-express : ^9.0.0\n        \n            @prisma/client : ^4.6.1\n        \n            amazon-cognito-identity-js : ^6.0.1\n        \n            aws-jwt-verify : ^3.2.0\n        \n            class-validator : ^0.13.2\n        \n            dotenv : ^16.0.3\n        \n            reflect-metadata : ^0.1.13\n        \n            rimraf : ^3.0.2\n        \n            rxjs : ^7.2.0\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            bootstrap   (src/.../main.ts)\n                        \n                        \n                            main   (prisma/.../seed.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/main.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        bootstrap\n                        \n                    \n                \n            \n            \n                \nbootstrap()\n                \n            \n\n\n\n\n        \n    \n    prisma/seed.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        main\n                        \n                    \n                \n            \n            \n                \nmain()\n                \n            \n\n\n\n\n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\nQ. これは何？\nA. NestJSのバックエンドテンプレートリポジトリです。\nQ. ユースケースは？\nログイン機能を必要とするアプリケーションに必要なAPIが実装されています。詳しくはこちらをご覧ください。\nまた、Prismaのセットアップが済んでいますので、データベースとの接続・連携も可能です。\nデータベースについて\n\nyarn up:db でデータベースコンテナを起動できます。\nprisma/seeds配下にシードファイルを用意しyarn seedコマンドを実行することで、事前にデータをInsertできます。\n\nHow to develop\nyarn install\nyarn start:dev\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"license.html":{"url":"license.html","title":"getting-started - license","body":"\n                   \n\nMIT License\nCopyright (c) 2022 Daichi\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        AppModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        AuthModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n  \n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_AppModule\n\n\n\ncluster_AppModule_providers\n\n\n\ncluster_AuthModule\n\n\n\n\nAppService\n\nAppService\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAppService->AppModule\n\n\n\n\n\nAuthService\n\nAuthService\n\nAppModule -->\n\nAuthService->AppModule\n\n\n\n\n\nAuthModule\n\nAuthModule\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\nPrismaService\n\nPrismaService\n\nAppModule -->\n\nPrismaService->AppModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n  \n\n    \n        \n            \n                \n                    \n                    \n                        2 Modules\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    2 Controllers\n                \n            \n        \n        \n            \n                \n                    \n                    5 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    6 Classes\n                \n            \n        \n        \n            \n                \n                    \n                    1 Guard\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"properties.html":{"url":"properties.html","title":"package-properties - properties","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Properties\n    \n    \n        \n            Version : 0.0.4\n        \n            Description : NestJSとPrismaで始めるスタートキットです\n        \n            License : MIT License\n        \n            Author : suyama-daichi\n    \n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            cognitoClient   (src/.../utils.helper.ts)\n                        \n                        \n                            createUserSeed   (prisma/.../userSeed.ts)\n                        \n                        \n                            fetchListUsers   (src/.../utils.helper.ts)\n                        \n                        \n                            prisma   (prisma/.../prismaClient.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/helpers/utils.helper.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        cognitoClient\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new CognitoIdentityProviderClient({})\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        fetchListUsers\n                        \n                    \n                \n            \n                \n                    \n                        Default value : async (email: string) => {\n  const command = new ListUsersCommand({\n    UserPoolId: process.env.COGNITO_USER_POOL_ID,\n    Filter: `email = \"${email}\"`,\n  });\n  const { Users: users } = await cognitoClient.send(command);\n  return users;\n}\n                    \n                \n\n            \n                \n                    CognitoのUserPoolの特定のEmailを持ったユーザーを取得する\n\n                \n            \n\n        \n    \n\n    prisma/seeds/userSeed.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        createUserSeed\n                        \n                    \n                \n            \n                \n                    \n                        Default value : async () => {\n  const userSeed = await prisma.user.createMany({\n    data: [\n      {\n        email: 'alice@prisma.io',\n        name: 'Alice',\n      },\n      {\n        email: 'bob@prisma.io',\n        name: 'Bob',\n      },\n    ],\n  });\n  console.log(userSeed && '🌱 user data is created.');\n}\n                    \n                \n\n\n        \n    \n\n    prisma/prismaClient.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        prisma\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new PrismaClient()\n                    \n                \n\n\n        \n    \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
